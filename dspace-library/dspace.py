# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_dspace', [dirname(__file__)])
        except ImportError:
            import _dspace
            return _dspace
        if fp is not None:
            try:
                _mod = imp.load_module('_dspace', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _dspace = swig_import_helper()
    del swig_import_helper
else:
    import _dspace
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def scan_start(*args):
  return _dspace.scan_start(*args)
scan_start = _dspace.scan_start

def scan_wait():
  return _dspace.scan_wait()
scan_wait = _dspace.scan_wait

def scan_cancel():
  return _dspace.scan_cancel()
scan_cancel = _dspace.scan_cancel

def startup_dspace():
  return _dspace.startup_dspace()
startup_dspace = _dspace.startup_dspace

def gps_locked():
  return _dspace.gps_locked()
gps_locked = _dspace.gps_locked

def gps_long():
  return _dspace.gps_long()
gps_long = _dspace.gps_long

def gps_lat():
  return _dspace.gps_lat()
gps_lat = _dspace.gps_lat

def scan_done():
  return _dspace.scan_done()
scan_done = _dspace.scan_done

def scan_description(*args):
  return _dspace.scan_description(*args)
scan_description = _dspace.scan_description

def tiff_name(*args):
  return _dspace.tiff_name(*args)
tiff_name = _dspace.tiff_name
kHdrSize = _dspace.kHdrSize
kCmdPos = _dspace.kCmdPos
kIDPos = _dspace.kIDPos
kLenPos = _dspace.kLenPos
kDataPos = _dspace.kDataPos
kCksumSize = _dspace.kCksumSize
kSyncByte = _dspace.kSyncByte
kCCNoErr = _dspace.kCCNoErr
kCCError = _dspace.kCCError
kCCSysInfo = _dspace.kCCSysInfo
kCCPinStates = _dspace.kCCPinStates
kCCPinValues = _dspace.kCCPinValues
kCCGetSysInfo = _dspace.kCCGetSysInfo
kCCGetPins = _dspace.kCCGetPins
kCCSetPins = _dspace.kCCSetPins
kCCSetPinModes = _dspace.kCCSetPinModes
kCCAnalogReads = _dspace.kCCAnalogReads
kCCSetPWM = _dspace.kCCSetPWM
kCCInvalid = _dspace.kCCInvalid
kNoErr = _dspace.kNoErr
kErrUnknownCmd = _dspace.kErrUnknownCmd
kErrMsgOversize = _dspace.kErrMsgOversize
kErrInvalidPin = _dspace.kErrInvalidPin
kErrOutToInput = _dspace.kErrOutToInput
kErrPredefined = _dspace.kErrPredefined
kErrOddPWM = _dspace.kErrOddPWM

def ard_init(*args):
  return _dspace.ard_init(*args)
ard_init = _dspace.ard_init

def ard_startup():
  return _dspace.ard_startup()
ard_startup = _dspace.ard_startup
kOnboardLEDPin = _dspace.kOnboardLEDPin
kPump1Pin = _dspace.kPump1Pin
kPump2Pin = _dspace.kPump2Pin
HIGH = _dspace.HIGH
LOW = _dspace.LOW
INPUT = _dspace.INPUT
OUTPUT = _dspace.OUTPUT

def pinMode(*args):
  return _dspace.pinMode(*args)
pinMode = _dspace.pinMode

def digitalWrite(*args):
  return _dspace.digitalWrite(*args)
digitalWrite = _dspace.digitalWrite

def digitalRead(*args):
  return _dspace.digitalRead(*args)
digitalRead = _dspace.digitalRead

def analogRead(*args):
  return _dspace.analogRead(*args)
analogRead = _dspace.analogRead

def analogWrite(*args):
  return _dspace.analogWrite(*args)
analogWrite = _dspace.analogWrite

def SendMsg(*args):
  return _dspace.SendMsg(*args)
SendMsg = _dspace.SendMsg

def HasMessageFor(*args):
  return _dspace.HasMessageFor(*args)
HasMessageFor = _dspace.HasMessageFor

def ReadMessageFor(*args):
  return _dspace.ReadMessageFor(*args)
ReadMessageFor = _dspace.ReadMessageFor
# This file is compatible with both classic and new-style classes.


