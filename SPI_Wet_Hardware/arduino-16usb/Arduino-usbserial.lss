
Arduino-usbserial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000102c  000010c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000102c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000119  00800118  00800118  000010d8  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000010d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000420  00000000  00000000  00001cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000b84  00000000  00000000  000020ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006f54  00000000  00000000  00002c83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000199a  00000000  00000000  00009bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005841  00000000  00000000  0000b571  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000640  00000000  00000000  00010db4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002925  00000000  00000000  000113f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000037cd  00000000  00000000  00013d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000b3e  00000000  00000000  000174e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000460  00000000  00000000  00018024  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMask(Size)));
			}
       0:	a2 c0       	rjmp	.+324    	; 0x146 <__ctors_end>
       2:	00 00       	nop
       4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
       6:	00 00       	nop
       8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
       a:	00 00       	nop
       c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
       e:	00 00       	nop
      10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
      12:	00 00       	nop
      14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
      16:	00 00       	nop
      18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
      1e:	00 00       	nop
      20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
      22:	00 00       	nop
      24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
      26:	00 00       	nop
      28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c4       	rjmp	.+2134   	; 0x884 <__vector_11>
      2e:	00 00       	nop
      30:	d0 c4       	rjmp	.+2464   	; 0x9d2 <__vector_12>
      32:	00 00       	nop
      34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
      36:	00 00       	nop
      38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
      3e:	00 00       	nop
      40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
      42:	00 00       	nop
      44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
      46:	00 00       	nop
      48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
      4e:	00 00       	nop
      50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
      52:	00 00       	nop
      54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
      56:	00 00       	nop
      58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e8 c1       	rjmp	.+976    	; 0x42e <__vector_23>
      5e:	00 00       	nop
      60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
      62:	00 00       	nop
      64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
      66:	00 00       	nop
      68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
      6e:	00 00       	nop
      70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
      72:	00 00       	nop
      74:	83 c0       	rjmp	.+262    	; 0x17c <__bad_interrupt>
      76:	00 00       	nop
      78:	81 c0       	rjmp	.+258    	; 0x17c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7f c0       	rjmp	.+254    	; 0x17c <__bad_interrupt>
      7e:	00 00       	nop
      80:	7d c0       	rjmp	.+250    	; 0x17c <__bad_interrupt>
      82:	00 00       	nop
      84:	7b c0       	rjmp	.+246    	; 0x17c <__bad_interrupt>
      86:	00 00       	nop
      88:	79 c0       	rjmp	.+242    	; 0x17c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	77 c0       	rjmp	.+238    	; 0x17c <__bad_interrupt>
      8e:	00 00       	nop
      90:	75 c0       	rjmp	.+234    	; 0x17c <__bad_interrupt>
      92:	00 00       	nop
      94:	73 c0       	rjmp	.+230    	; 0x17c <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ba:	01 00 05 24 00 01 10 04 24 02 06 05 24 06 00 01     ...$....$...$...
      ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      da:	07 05 04 02 40 00 01 07 05 83 02 40 00 01           ....@......@..

000000e8 <LanguageString>:
      e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
      ec:	32 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     2.A.r.d.u.i.n.o.
      fc:	20 00 28 00 77 00 77 00 77 00 2e 00 61 00 72 00      .(.w.w.w...a.r.
     10c:	64 00 75 00 69 00 6e 00 6f 00 2e 00 63 00 63 00     d.u.i.n.o...c.c.
     11c:	29 00 00 00                                         )...

00000120 <ProductString>:
     120:	24 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     $.A.r.d.u.i.n.o.
     130:	20 00 4d 00 65 00 67 00 61 00 20 00 32 00 35 00      .M.e.g.a. .2.5.
     140:	36 00 30 00 00 00                                   6.0...

00000146 <__ctors_end>:
     146:	11 24       	eor	r1, r1
     148:	1f be       	out	0x3f, r1	; 63
     14a:	cf ef       	ldi	r28, 0xFF	; 255
     14c:	d2 e0       	ldi	r29, 0x02	; 2
     14e:	de bf       	out	0x3e, r29	; 62
     150:	cd bf       	out	0x3d, r28	; 61

00000152 <__do_copy_data>:
     152:	11 e0       	ldi	r17, 0x01	; 1
     154:	a0 e0       	ldi	r26, 0x00	; 0
     156:	b1 e0       	ldi	r27, 0x01	; 1
     158:	ec e2       	ldi	r30, 0x2C	; 44
     15a:	f0 e1       	ldi	r31, 0x10	; 16
     15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x10>
     15e:	05 90       	lpm	r0, Z+
     160:	0d 92       	st	X+, r0
     162:	a8 31       	cpi	r26, 0x18	; 24
     164:	b1 07       	cpc	r27, r17
     166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0xc>

00000168 <__do_clear_bss>:
     168:	12 e0       	ldi	r17, 0x02	; 2
     16a:	a8 e1       	ldi	r26, 0x18	; 24
     16c:	b1 e0       	ldi	r27, 0x01	; 1
     16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
     170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
     172:	a1 33       	cpi	r26, 0x31	; 49
     174:	b1 07       	cpc	r27, r17
     176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
     178:	28 d0       	rcall	.+80     	; 0x1ca <main>
     17a:	56 c7       	rjmp	.+3756   	; 0x1028 <_exit>

0000017c <__bad_interrupt>:
     17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     17e:	84 b7       	in	r24, 0x34	; 52
     180:	87 7f       	andi	r24, 0xF7	; 247
     182:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     184:	28 e1       	ldi	r18, 0x18	; 24
     186:	0f b6       	in	r0, 0x3f	; 63
     188:	f8 94       	cli
     18a:	20 93 60 00 	sts	0x0060, r18
     18e:	10 92 60 00 	sts	0x0060, r1
     192:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     194:	87 e6       	ldi	r24, 0x67	; 103
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	90 93 cd 00 	sts	0x00CD, r25
     19c:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     1a0:	86 e0       	ldi	r24, 0x06	; 6
     1a2:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     1a6:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     1aa:	20 93 c9 00 	sts	0x00C9, r18
				
				DDRD  |= (1 << 3);
     1ae:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     1b0:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
     1b2:	8a b1       	in	r24, 0x0a	; 10
     1b4:	80 63       	ori	r24, 0x30	; 48
     1b6:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
     1b8:	8b b1       	in	r24, 0x0b	; 11
     1ba:	80 63       	ori	r24, 0x30	; 48
     1bc:	8b b9       	out	0x0b, r24	; 11

	/* Hardware Initialization */
	Serial_Init(9600, false);
	LEDs_Init();
	USB_Init();
     1be:	57 d3       	rcall	.+1710   	; 0x86e <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
     1c0:	84 e0       	ldi	r24, 0x04	; 4
     1c2:	85 bd       	out	0x25, r24	; 37
	
	/* Pull target /RESET line high */
	AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
     1c4:	5f 9a       	sbi	0x0b, 7	; 11
	AVR_RESET_LINE_DDR  |= AVR_RESET_LINE_MASK;
     1c6:	57 9a       	sbi	0x0a, 7	; 10
}
     1c8:	08 95       	ret

000001ca <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     1ca:	cf 92       	push	r12
     1cc:	df 92       	push	r13
     1ce:	ef 92       	push	r14
     1d0:	ff 92       	push	r15
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
	SetupHardware();
     1d6:	d3 df       	rcall	.-90     	; 0x17e <SetupHardware>
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     1d8:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1da:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
     1dc:	20 ea       	ldi	r18, 0xA0	; 160
     1de:	31 e0       	ldi	r19, 0x01	; 1
     1e0:	30 93 21 02 	sts	0x0221, r19
     1e4:	20 93 20 02 	sts	0x0220, r18
				Buffer->Out = Buffer->Buffer;
     1e8:	30 93 23 02 	sts	0x0223, r19
     1ec:	20 93 22 02 	sts	0x0222, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     1f0:	8f bf       	out	0x3f, r24	; 63
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     1f2:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     1f4:	f8 94       	cli
			{
				Buffer->In  = Buffer->Buffer;
     1f6:	8b e1       	ldi	r24, 0x1B	; 27
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	90 93 9c 01 	sts	0x019C, r25
     1fe:	80 93 9b 01 	sts	0x019B, r24
				Buffer->Out = Buffer->Buffer;
     202:	90 93 9e 01 	sts	0x019E, r25
     206:	80 93 9d 01 	sts	0x019D, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     20a:	4f bf       	out	0x3f, r20	; 63
	
	RingBuffer_InitBuffer(&USBtoUSART_Buffer);
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

	sei();
     20c:	78 94       	sei
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->In = Buffer->Buffer;
     20e:	12 2f       	mov	r17, r18
     210:	03 2f       	mov	r16, r19
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
			  Buffer->Out = Buffer->Buffer;
     212:	e8 2e       	mov	r14, r24
     214:	d9 2e       	mov	r13, r25
		{
			TIFR0 |= (1 << TOV0);

			if (USARTtoUSB_Buffer.Count) {
				LEDs_TurnOnLEDs(LEDMASK_TX);
				PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	f8 2e       	mov	r15, r24
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     21a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     21c:	f8 94       	cli
			{
				Count = Buffer->Count;
     21e:	80 91 24 02 	lds	r24, 0x0224
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     222:	9f bf       	out	0x3f, r25	; 63
	sei();

	for (;;)
	{
		/* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
     224:	80 38       	cpi	r24, 0x80	; 128
     226:	11 f1       	breq	.+68     	; 0x26c <main+0xa2>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	af d6       	rcall	.+3422   	; 0xf8c <CDC_Device_ReceiveByte>

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
     22e:	97 fd       	sbrc	r25, 7
     230:	1d c0       	rjmp	.+58     	; 0x26c <main+0xa2>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     232:	e0 91 20 02 	lds	r30, 0x0220
     236:	f0 91 21 02 	lds	r31, 0x0221
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
     23a:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     23c:	e0 91 20 02 	lds	r30, 0x0220
     240:	f0 91 21 02 	lds	r31, 0x0221
     244:	cf 01       	movw	r24, r30
     246:	01 96       	adiw	r24, 0x01	; 1
     248:	90 93 21 02 	sts	0x0221, r25
     24c:	80 93 20 02 	sts	0x0220, r24
     250:	22 e0       	ldi	r18, 0x02	; 2
     252:	80 32       	cpi	r24, 0x20	; 32
     254:	92 07       	cpc	r25, r18
     256:	11 f4       	brne	.+4      	; 0x25c <main+0x92>
			  Buffer->In = Buffer->Buffer;
     258:	11 83       	std	Z+1, r17	; 0x01
     25a:	02 83       	std	Z+2, r16	; 0x02

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     25c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     25e:	f8 94       	cli
			{
				Buffer->Count++;
     260:	80 91 24 02 	lds	r24, 0x0224
     264:	8f 5f       	subi	r24, 0xFF	; 255
     266:	80 93 24 02 	sts	0x0224, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     26a:	9f bf       	out	0x3f, r25	; 63
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     26c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     26e:	f8 94       	cli
			{
				Count = Buffer->Count;
     270:	c0 90 9f 01 	lds	r12, 0x019F
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     274:	8f bf       	out	0x3f, r24	; 63
		}
		
		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > BUFFER_NEARLY_FULL))
     276:	a8 99       	sbic	0x15, 0	; 21
     278:	04 c0       	rjmp	.+8      	; 0x282 <main+0xb8>
     27a:	8c 2d       	mov	r24, r12
     27c:	81 36       	cpi	r24, 0x61	; 97
     27e:	08 f4       	brcc	.+2      	; 0x282 <main+0xb8>
     280:	44 c0       	rjmp	.+136    	; 0x30a <__stack+0xb>
		{
			TIFR0 |= (1 << TOV0);
     282:	a8 9a       	sbi	0x15, 0	; 21

			if (USARTtoUSB_Buffer.Count) {
     284:	80 91 9f 01 	lds	r24, 0x019F
     288:	88 23       	and	r24, r24
     28a:	09 f1       	breq	.+66     	; 0x2ce <main+0x104>
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
     28c:	5d 98       	cbi	0x0b, 5	; 11
				LEDs_TurnOnLEDs(LEDMASK_TX);
				PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
     28e:	f0 92 18 01 	sts	0x0118, r15
     292:	1d c0       	rjmp	.+58     	; 0x2ce <main+0x104>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     294:	e0 91 9d 01 	lds	r30, 0x019D
     298:	f0 91 9e 01 	lds	r31, 0x019E
     29c:	61 91       	ld	r22, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     29e:	f0 93 9e 01 	sts	0x019E, r31
     2a2:	e0 93 9d 01 	sts	0x019D, r30
     2a6:	21 e0       	ldi	r18, 0x01	; 1
     2a8:	eb 39       	cpi	r30, 0x9B	; 155
     2aa:	f2 07       	cpc	r31, r18
     2ac:	21 f4       	brne	.+8      	; 0x2b6 <main+0xec>
			  Buffer->Out = Buffer->Buffer;
     2ae:	e0 92 9d 01 	sts	0x019D, r14
     2b2:	d0 92 9e 01 	sts	0x019E, r13

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     2b6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2b8:	f8 94       	cli
			{
				Buffer->Count--;
     2ba:	80 91 9f 01 	lds	r24, 0x019F
     2be:	81 50       	subi	r24, 0x01	; 1
     2c0:	80 93 9f 01 	sts	0x019F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2c4:	9f bf       	out	0x3f, r25	; 63
			}

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
			  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	f9 d5       	rcall	.+3058   	; 0xebe <CDC_Device_SendByte>
     2cc:	ca 94       	dec	r12
				LEDs_TurnOnLEDs(LEDMASK_TX);
				PulseMSRemaining.TxLEDPulse = TX_RX_LED_PULSE_MS;
			}

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
     2ce:	cc 20       	and	r12, r12
     2d0:	09 f7       	brne	.-62     	; 0x294 <main+0xca>
			  CDC_Device_SendByte(&VirtualSerial_CDC_Interface, RingBuffer_Remove(&USARTtoUSB_Buffer));
			  
			/* Turn off TX LED(s) once the TX pulse period has elapsed */
			if (PulseMSRemaining.TxLEDPulse && !(--PulseMSRemaining.TxLEDPulse))
     2d2:	80 91 18 01 	lds	r24, 0x0118
     2d6:	88 23       	and	r24, r24
     2d8:	51 f0       	breq	.+20     	; 0x2ee <main+0x124>
     2da:	80 91 18 01 	lds	r24, 0x0118
     2de:	81 50       	subi	r24, 0x01	; 1
     2e0:	80 93 18 01 	sts	0x0118, r24
     2e4:	80 91 18 01 	lds	r24, 0x0118
     2e8:	88 23       	and	r24, r24
     2ea:	09 f4       	brne	.+2      	; 0x2ee <main+0x124>
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
     2ec:	5d 9a       	sbi	0x0b, 5	; 11
			  LEDs_TurnOffLEDs(LEDMASK_TX);

			/* Turn off RX LED(s) once the RX pulse period has elapsed */
			if (PulseMSRemaining.RxLEDPulse && !(--PulseMSRemaining.RxLEDPulse))
     2ee:	80 91 19 01 	lds	r24, 0x0119
     2f2:	88 23       	and	r24, r24
     2f4:	51 f0       	breq	.+20     	; 0x30a <__stack+0xb>
     2f6:	80 91 19 01 	lds	r24, 0x0119
     2fa:	81 50       	subi	r24, 0x01	; 1
     2fc:	80 93 19 01 	sts	0x0119, r24
     300:	80 91 19 01 	lds	r24, 0x0119
     304:	88 23       	and	r24, r24
     306:	09 f4       	brne	.+2      	; 0x30a <__stack+0xb>
     308:	5c 9a       	sbi	0x0b, 4	; 11
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     30a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     30c:	f8 94       	cli
			{
				Count = Buffer->Count;
     30e:	80 91 24 02 	lds	r24, 0x0224
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     312:	9f bf       	out	0x3f, r25	; 63
			  LEDs_TurnOffLEDs(LEDMASK_RX);
		}
		
		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer))) {
     314:	88 23       	and	r24, r24
     316:	11 f1       	breq	.+68     	; 0x35c <__stack+0x5d>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
     318:	e0 91 22 02 	lds	r30, 0x0222
     31c:	f0 91 23 02 	lds	r31, 0x0223
     320:	91 91       	ld	r25, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
     322:	f0 93 23 02 	sts	0x0223, r31
     326:	e0 93 22 02 	sts	0x0222, r30
     32a:	82 e0       	ldi	r24, 0x02	; 2
     32c:	e0 32       	cpi	r30, 0x20	; 32
     32e:	f8 07       	cpc	r31, r24
     330:	21 f4       	brne	.+8      	; 0x33a <__stack+0x3b>
			  Buffer->Out = Buffer->Buffer;
     332:	10 93 22 02 	sts	0x0222, r17
     336:	00 93 23 02 	sts	0x0223, r16

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     33a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     33c:	f8 94       	cli
			{
				Buffer->Count--;
     33e:	80 91 24 02 	lds	r24, 0x0224
     342:	81 50       	subi	r24, 0x01	; 1
     344:	80 93 24 02 	sts	0x0224, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     348:	2f bf       	out	0x3f, r18	; 63
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_TxByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     34a:	80 91 c8 00 	lds	r24, 0x00C8
     34e:	85 ff       	sbrs	r24, 5
     350:	fc cf       	rjmp	.-8      	; 0x34a <__stack+0x4b>
				UDR1 = DataByte;
     352:	90 93 ce 00 	sts	0x00CE, r25
				PORTD |= LEDS_ALL_LEDS;
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
     356:	5c 98       	cbi	0x0b, 4	; 11
		  Serial_TxByte(RingBuffer_Remove(&USBtoUSART_Buffer));
		  	
		  	LEDs_TurnOnLEDs(LEDMASK_RX);
			PulseMSRemaining.RxLEDPulse = TX_RX_LED_PULSE_MS;
     358:	f0 92 19 01 	sts	0x0119, r15
		}
		
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	06 d6       	rcall	.+3084   	; 0xf6e <CDC_Device_USBTask>
		USB_USBTask();
     362:	d8 d4       	rcall	.+2480   	; 0xd14 <USB_USBTask>
	}
     364:	5a cf       	rjmp	.-332    	; 0x21a <main+0x50>

00000366 <EVENT_USB_Device_ConfigurationChanged>:
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	91 e0       	ldi	r25, 0x01	; 1
}
     36a:	70 c5       	rjmp	.+2784   	; 0xe4c <CDC_Device_ConfigureEndpoints>

0000036c <EVENT_USB_Device_UnhandledControlRequest>:

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	91 e0       	ldi	r25, 0x01	; 1
}
     370:	03 c5       	rjmp	.+2566   	; 0xd78 <CDC_Device_ProcessControlRequest>

00000372 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	ec 01       	movw	r28, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     37a:	ec 89       	ldd	r30, Y+20	; 0x14
     37c:	e1 50       	subi	r30, 0x01	; 1
     37e:	e2 30       	cpi	r30, 0x02	; 2
     380:	28 f4       	brcc	.+10     	; 0x38c <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	ea 5e       	subi	r30, 0xEA	; 234
     386:	fe 4f       	sbci	r31, 0xFE	; 254
     388:	10 81       	ld	r17, Z
     38a:	01 c0       	rjmp	.+2      	; 0x38e <EVENT_CDC_Device_LineEncodingChanged+0x1c>
     38c:	10 e0       	ldi	r17, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);		
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     38e:	8b 89       	ldd	r24, Y+19	; 0x13
     390:	82 30       	cpi	r24, 0x02	; 2
     392:	09 f4       	brne	.+2      	; 0x396 <EVENT_CDC_Device_LineEncodingChanged+0x24>
	  ConfigMask |= (1 << USBS1);
     394:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     396:	8d 89       	ldd	r24, Y+21	; 0x15
     398:	87 30       	cpi	r24, 0x07	; 7
     39a:	31 f0       	breq	.+12     	; 0x3a8 <EVENT_CDC_Device_LineEncodingChanged+0x36>
     39c:	88 30       	cpi	r24, 0x08	; 8
     39e:	31 f0       	breq	.+12     	; 0x3ac <EVENT_CDC_Device_LineEncodingChanged+0x3a>
     3a0:	86 30       	cpi	r24, 0x06	; 6
     3a2:	29 f4       	brne	.+10     	; 0x3ae <EVENT_CDC_Device_LineEncodingChanged+0x3c>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     3a4:	12 60       	ori	r17, 0x02	; 2
			break;
     3a6:	03 c0       	rjmp	.+6      	; 0x3ae <EVENT_CDC_Device_LineEncodingChanged+0x3c>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     3a8:	14 60       	ori	r17, 0x04	; 4
			break;
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <EVENT_CDC_Device_LineEncodingChanged+0x3c>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     3ac:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     3ae:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     3b2:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     3b6:	10 92 ca 00 	sts	0x00CA, r1

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
     3ba:	2f 85       	ldd	r18, Y+15	; 0x0f
     3bc:	38 89       	ldd	r19, Y+16	; 0x10
     3be:	49 89       	ldd	r20, Y+17	; 0x11
     3c0:	5a 89       	ldd	r21, Y+18	; 0x12
     3c2:	20 30       	cpi	r18, 0x00	; 0
     3c4:	81 ee       	ldi	r24, 0xE1	; 225
     3c6:	38 07       	cpc	r19, r24
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	48 07       	cpc	r20, r24
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	58 07       	cpc	r21, r24
     3d0:	71 f0       	breq	.+28     	; 0x3ee <EVENT_CDC_Device_LineEncodingChanged+0x7c>
			 ? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
			 : SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);	
     3d2:	ca 01       	movw	r24, r20
     3d4:	b9 01       	movw	r22, r18
     3d6:	96 95       	lsr	r25
     3d8:	87 95       	ror	r24
     3da:	77 95       	ror	r23
     3dc:	67 95       	ror	r22
     3de:	60 58       	subi	r22, 0x80	; 128
     3e0:	7b 47       	sbci	r23, 0x7B	; 123
     3e2:	81 4e       	sbci	r24, 0xE1	; 225
     3e4:	9f 4f       	sbci	r25, 0xFF	; 255
     3e6:	fe d5       	rcall	.+3068   	; 0xfe4 <__udivmodsi4>
	UCSR1B = 0;
	UCSR1A = 0;
	UCSR1C = 0;

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600)
     3e8:	21 50       	subi	r18, 0x01	; 1
     3ea:	30 40       	sbci	r19, 0x00	; 0
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <EVENT_CDC_Device_LineEncodingChanged+0x80>
     3ee:	20 e1       	ldi	r18, 0x10	; 16
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	30 93 cd 00 	sts	0x00CD, r19
     3f6:	20 93 cc 00 	sts	0x00CC, r18
			 ? SERIAL_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS)
			 : SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);	

	UCSR1C = ConfigMask;
     3fa:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (CDCInterfaceInfo->State.LineEncoding.BaudRateBPS == 57600) ? 0 : (1 << U2X1);
     3fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     400:	98 89       	ldd	r25, Y+16	; 0x10
     402:	a9 89       	ldd	r26, Y+17	; 0x11
     404:	ba 89       	ldd	r27, Y+18	; 0x12
     406:	80 30       	cpi	r24, 0x00	; 0
     408:	21 ee       	ldi	r18, 0xE1	; 225
     40a:	92 07       	cpc	r25, r18
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	a2 07       	cpc	r26, r18
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	b2 07       	cpc	r27, r18
     414:	11 f4       	brne	.+4      	; 0x41a <EVENT_CDC_Device_LineEncodingChanged+0xa8>
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	01 c0       	rjmp	.+2      	; 0x41c <EVENT_CDC_Device_LineEncodingChanged+0xaa>
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     420:	88 e9       	ldi	r24, 0x98	; 152
     422:	80 93 c9 00 	sts	0x00C9, r24
}
     426:	df 91       	pop	r29
     428:	cf 91       	pop	r28
     42a:	1f 91       	pop	r17
     42c:	08 95       	ret

0000042e <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     42e:	1f 92       	push	r1
     430:	0f 92       	push	r0
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	0f 92       	push	r0
     436:	11 24       	eor	r1, r1
     438:	2f 93       	push	r18
     43a:	8f 93       	push	r24
     43c:	9f 93       	push	r25
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     442:	80 91 ce 00 	lds	r24, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     446:	9e b3       	in	r25, 0x1e	; 30
     448:	94 30       	cpi	r25, 0x04	; 4
     44a:	f9 f4       	brne	.+62     	; 0x48a <__vector_23+0x5c>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
     44c:	e0 91 9b 01 	lds	r30, 0x019B
     450:	f0 91 9c 01 	lds	r31, 0x019C
     454:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
     456:	e0 91 9b 01 	lds	r30, 0x019B
     45a:	f0 91 9c 01 	lds	r31, 0x019C
     45e:	cf 01       	movw	r24, r30
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	90 93 9c 01 	sts	0x019C, r25
     466:	80 93 9b 01 	sts	0x019B, r24
     46a:	21 e0       	ldi	r18, 0x01	; 1
     46c:	8b 39       	cpi	r24, 0x9B	; 155
     46e:	92 07       	cpc	r25, r18
     470:	21 f4       	brne	.+8      	; 0x47a <__vector_23+0x4c>
			  Buffer->In = Buffer->Buffer;
     472:	8b e1       	ldi	r24, 0x1B	; 27
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	92 83       	std	Z+2, r25	; 0x02
     478:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     47a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     47c:	f8 94       	cli
			{
				Buffer->Count++;
     47e:	80 91 9f 01 	lds	r24, 0x019F
     482:	8f 5f       	subi	r24, 0xFF	; 255
     484:	80 93 9f 01 	sts	0x019F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     488:	9f bf       	out	0x3f, r25	; 63
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
}
     48a:	ff 91       	pop	r31
     48c:	ef 91       	pop	r30
     48e:	9f 91       	pop	r25
     490:	8f 91       	pop	r24
     492:	2f 91       	pop	r18
     494:	0f 90       	pop	r0
     496:	0f be       	out	0x3f, r0	; 63
     498:	0f 90       	pop	r0
     49a:	1f 90       	pop	r1
     49c:	18 95       	reti

0000049e <EVENT_CDC_Device_ControLineStateChanged>:
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	bool CurrentDTRState = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR);
     49e:	fc 01       	movw	r30, r24
     4a0:	85 85       	ldd	r24, Z+13	; 0x0d

	if (CurrentDTRState)
     4a2:	80 ff       	sbrs	r24, 0
     4a4:	02 c0       	rjmp	.+4      	; 0x4aa <EVENT_CDC_Device_ControLineStateChanged+0xc>
	  AVR_RESET_LINE_PORT &= ~AVR_RESET_LINE_MASK;
     4a6:	5f 98       	cbi	0x0b, 7	; 11
     4a8:	08 95       	ret
	else
	  AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
     4aa:	5f 9a       	sbi	0x0b, 7	; 11
     4ac:	08 95       	ret

000004ae <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     4ae:	92 30       	cpi	r25, 0x02	; 2
     4b0:	29 f0       	breq	.+10     	; 0x4bc <CALLBACK_USB_GetDescriptor+0xe>
     4b2:	93 30       	cpi	r25, 0x03	; 3
     4b4:	41 f0       	breq	.+16     	; 0x4c6 <CALLBACK_USB_GetDescriptor+0x18>
     4b6:	91 30       	cpi	r25, 0x01	; 1
     4b8:	e9 f4       	brne	.+58     	; 0x4f4 <CALLBACK_USB_GetDescriptor+0x46>
     4ba:	17 c0       	rjmp	.+46     	; 0x4ea <CALLBACK_USB_GetDescriptor+0x3c>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     4bc:	2e e3       	ldi	r18, 0x3E	; 62
     4be:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
     4c0:	ea ea       	ldi	r30, 0xAA	; 170
     4c2:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     4c4:	1b c0       	rjmp	.+54     	; 0x4fc <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String: 
			switch (DescriptorNumber)
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	41 f0       	breq	.+16     	; 0x4da <CALLBACK_USB_GetDescriptor+0x2c>
     4ca:	81 30       	cpi	r24, 0x01	; 1
     4cc:	18 f0       	brcs	.+6      	; 0x4d4 <CALLBACK_USB_GetDescriptor+0x26>
     4ce:	82 30       	cpi	r24, 0x02	; 2
     4d0:	89 f4       	brne	.+34     	; 0x4f4 <CALLBACK_USB_GetDescriptor+0x46>
     4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     4d4:	e8 ee       	ldi	r30, 0xE8	; 232
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     4da:	ec ee       	ldi	r30, 0xEC	; 236
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     4e0:	e0 e2       	ldi	r30, 0x20	; 32
     4e2:	f1 e0       	ldi	r31, 0x01	; 1
     4e4:	24 91       	lpm	r18, Z+
     4e6:	30 e0       	ldi	r19, 0x00	; 0
					break;
     4e8:	09 c0       	rjmp	.+18     	; 0x4fc <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     4ea:	22 e1       	ldi	r18, 0x12	; 18
     4ec:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
     4ee:	e8 e9       	ldi	r30, 0x98	; 152
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	04 c0       	rjmp	.+8      	; 0x4fc <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	30 e0       	ldi	r19, 0x00	; 0
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
     4f8:	e0 e0       	ldi	r30, 0x00	; 0
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
			}
			
			break;
	}
	
	*DescriptorAddress = Address;
     4fc:	da 01       	movw	r26, r20
     4fe:	11 96       	adiw	r26, 0x01	; 1
     500:	fc 93       	st	X, r31
     502:	ee 93       	st	-X, r30
	return Size;
}
     504:	c9 01       	movw	r24, r18
     506:	08 95       	ret

00000508 <Endpoint_BytesToEPSizeMaskDynamic>:
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     508:	28 e0       	ldi	r18, 0x08	; 8
     50a:	30 e0       	ldi	r19, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	03 c0       	rjmp	.+6      	; 0x516 <Endpoint_BytesToEPSizeMaskDynamic+0xe>
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
				{
					MaskVal++;
     510:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     512:	22 0f       	add	r18, r18
     514:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
     516:	28 17       	cp	r18, r24
     518:	39 07       	cpc	r19, r25
     51a:	d0 f3       	brcs	.-12     	; 0x510 <Endpoint_BytesToEPSizeMaskDynamic+0x8>
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
	return Endpoint_BytesToEPSizeMask(Size);
}
     51c:	84 2f       	mov	r24, r20
     51e:	82 95       	swap	r24
     520:	80 7f       	andi	r24, 0xF0	; 240
     522:	08 95       	ret

00000524 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     524:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     528:	eb ee       	ldi	r30, 0xEB	; 235
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	80 81       	ld	r24, Z
     52e:	81 60       	ori	r24, 0x01	; 1
     530:	80 83       	st	Z, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
     532:	ed ee       	ldi	r30, 0xED	; 237
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	10 82       	st	Z, r1

	UECFG0X = UECFG0XData;
     538:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
     53c:	40 83       	st	Z, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     53e:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
     542:	88 1f       	adc	r24, r24
     544:	88 27       	eor	r24, r24
     546:	88 1f       	adc	r24, r24
     548:	08 95       	ret

0000054a <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
     54a:	10 92 f4 00 	sts	0x00F4, r1

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     54e:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     550:	80 93 e9 00 	sts	0x00E9, r24
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
     554:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
     558:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
     55c:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     560:	90 91 eb 00 	lds	r25, 0x00EB
     564:	9e 7f       	andi	r25, 0xFE	; 254
     566:	90 93 eb 00 	sts	0x00EB, r25

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	85 30       	cpi	r24, 0x05	; 5
     56e:	81 f7       	brne	.-32     	; 0x550 <Endpoint_ClearEndpoints+0x6>
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
     570:	08 95       	ret

00000572 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     572:	80 91 29 02 	lds	r24, 0x0229
     576:	87 ff       	sbrs	r24, 7
     578:	11 c0       	rjmp	.+34     	; 0x59c <Endpoint_ClearStatusStage+0x2a>
     57a:	03 c0       	rjmp	.+6      	; 0x582 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     57c:	8e b3       	in	r24, 0x1e	; 30
     57e:	88 23       	and	r24, r24
     580:	b1 f0       	breq	.+44     	; 0x5ae <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     582:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     586:	82 ff       	sbrs	r24, 2
     588:	f9 cf       	rjmp	.-14     	; 0x57c <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     58a:	80 91 e8 00 	lds	r24, 0x00E8
     58e:	8b 77       	andi	r24, 0x7B	; 123
     590:	80 93 e8 00 	sts	0x00E8, r24
     594:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     596:	8e b3       	in	r24, 0x1e	; 30
     598:	88 23       	and	r24, r24
     59a:	49 f0       	breq	.+18     	; 0x5ae <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     59c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     5a0:	80 ff       	sbrs	r24, 0
     5a2:	f9 cf       	rjmp	.-14     	; 0x596 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     5a4:	80 91 e8 00 	lds	r24, 0x00E8
     5a8:	8e 77       	andi	r24, 0x7E	; 126
     5aa:	80 93 e8 00 	sts	0x00E8, r24
     5ae:	08 95       	ret

000005b0 <Endpoint_WaitUntilReady>:

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;	
     5b0:	84 e6       	ldi	r24, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
     5b2:	90 91 ec 00 	lds	r25, 0x00EC
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
     5b6:	90 ff       	sbrs	r25, 0
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <Endpoint_WaitUntilReady+0x14>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     5ba:	90 91 e8 00 	lds	r25, 0x00E8
		{
			if (Endpoint_IsINReady())
     5be:	90 ff       	sbrs	r25, 0
     5c0:	05 c0       	rjmp	.+10     	; 0x5cc <Endpoint_WaitUntilReady+0x1c>
     5c2:	1b c0       	rjmp	.+54     	; 0x5fa <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5c4:	90 91 e8 00 	lds	r25, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     5c8:	92 fd       	sbrc	r25, 2
     5ca:	17 c0       	rjmp	.+46     	; 0x5fa <Endpoint_WaitUntilReady+0x4a>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     5cc:	9e b3       	in	r25, 0x1e	; 30
     5ce:	99 23       	and	r25, r25
     5d0:	b1 f0       	breq	.+44     	; 0x5fe <Endpoint_WaitUntilReady+0x4e>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     5d2:	9e b3       	in	r25, 0x1e	; 30
     5d4:	95 30       	cpi	r25, 0x05	; 5
     5d6:	a9 f0       	breq	.+42     	; 0x602 <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     5d8:	90 91 eb 00 	lds	r25, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     5dc:	95 fd       	sbrc	r25, 5
     5de:	13 c0       	rjmp	.+38     	; 0x606 <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
     5e0:	90 91 e1 00 	lds	r25, 0x00E1
     5e4:	92 ff       	sbrs	r25, 2
     5e6:	e5 cf       	rjmp	.-54     	; 0x5b2 <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
     5e8:	90 91 e1 00 	lds	r25, 0x00E1
     5ec:	9b 7f       	andi	r25, 0xFB	; 251
     5ee:	90 93 e1 00 	sts	0x00E1, r25

			if (!(TimeoutMSRem--))
     5f2:	88 23       	and	r24, r24
     5f4:	51 f0       	breq	.+20     	; 0x60a <Endpoint_WaitUntilReady+0x5a>
     5f6:	81 50       	subi	r24, 0x01	; 1
     5f8:	dc cf       	rjmp	.-72     	; 0x5b2 <Endpoint_WaitUntilReady+0x2>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	08 95       	ret
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	08 95       	ret
		if (USB_INT_HasOccurred(USB_INT_SOFI))
		{
			USB_INT_Clear(USB_INT_SOFI);

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     60a:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
}
     60c:	08 95       	ret

0000060e <Endpoint_Write_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     60e:	28 2f       	mov	r18, r24
     610:	39 2f       	mov	r19, r25
     612:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
     614:	80 91 2f 02 	lds	r24, 0x022F
     618:	90 91 30 02 	lds	r25, 0x0230
     61c:	86 17       	cp	r24, r22
     61e:	97 07       	cpc	r25, r23
     620:	18 f4       	brcc	.+6      	; 0x628 <Endpoint_Write_Control_Stream_LE+0x1a>
     622:	bc 01       	movw	r22, r24
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	32 c0       	rjmp	.+100    	; 0x68c <Endpoint_Write_Control_Stream_LE+0x7e>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     628:	61 15       	cp	r22, r1
     62a:	71 05       	cpc	r23, r1
     62c:	d9 f7       	brne	.-10     	; 0x624 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     62e:	80 91 e8 00 	lds	r24, 0x00E8
     632:	8e 77       	andi	r24, 0x7E	; 126
     634:	80 93 e8 00 	sts	0x00E8, r24
     638:	f5 cf       	rjmp	.-22     	; 0x624 <Endpoint_Write_Control_Stream_LE+0x16>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     63a:	80 91 e8 00 	lds	r24, 0x00E8
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     63e:	83 fd       	sbrc	r24, 3
     640:	37 c0       	rjmp	.+110    	; 0x6b0 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     642:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     646:	82 fd       	sbrc	r24, 2
     648:	2d c0       	rjmp	.+90     	; 0x6a4 <Endpoint_Write_Control_Stream_LE+0x96>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     64a:	8e b3       	in	r24, 0x1e	; 30
     64c:	88 23       	and	r24, r24
     64e:	a1 f1       	breq	.+104    	; 0x6b8 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     650:	8e b3       	in	r24, 0x1e	; 30
     652:	85 30       	cpi	r24, 0x05	; 5
     654:	79 f1       	breq	.+94     	; 0x6b4 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     656:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     65a:	80 ff       	sbrs	r24, 0
     65c:	17 c0       	rjmp	.+46     	; 0x68c <Endpoint_Write_Control_Stream_LE+0x7e>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     65e:	80 91 f2 00 	lds	r24, 0x00F2
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     662:	06 c0       	rjmp	.+12     	; 0x670 <Endpoint_Write_Control_Stream_LE+0x62>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     664:	91 91       	ld	r25, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     666:	90 93 f1 00 	sts	0x00F1, r25
				Length--;
     66a:	61 50       	subi	r22, 0x01	; 1
     66c:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     66e:	8f 5f       	subi	r24, 0xFF	; 255
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     670:	61 15       	cp	r22, r1
     672:	71 05       	cpc	r23, r1
     674:	11 f0       	breq	.+4      	; 0x67a <Endpoint_Write_Control_Stream_LE+0x6c>
     676:	88 30       	cpi	r24, 0x08	; 8
     678:	a8 f3       	brcs	.-22     	; 0x664 <Endpoint_Write_Control_Stream_LE+0x56>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	88 30       	cpi	r24, 0x08	; 8
     67e:	09 f0       	breq	.+2      	; 0x682 <Endpoint_Write_Control_Stream_LE+0x74>
     680:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     682:	80 91 e8 00 	lds	r24, 0x00E8
     686:	8e 77       	andi	r24, 0x7E	; 126
     688:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     68c:	61 15       	cp	r22, r1
     68e:	71 05       	cpc	r23, r1
     690:	a1 f6       	brne	.-88     	; 0x63a <Endpoint_Write_Control_Stream_LE+0x2c>
     692:	99 23       	and	r25, r25
     694:	91 f6       	brne	.-92     	; 0x63a <Endpoint_Write_Control_Stream_LE+0x2c>
     696:	06 c0       	rjmp	.+12     	; 0x6a4 <Endpoint_Write_Control_Stream_LE+0x96>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     698:	8e b3       	in	r24, 0x1e	; 30
     69a:	88 23       	and	r24, r24
     69c:	69 f0       	breq	.+26     	; 0x6b8 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     69e:	8e b3       	in	r24, 0x1e	; 30
     6a0:	85 30       	cpi	r24, 0x05	; 5
     6a2:	61 f0       	breq	.+24     	; 0x6bc <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6a4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
     6a8:	82 ff       	sbrs	r24, 2
     6aa:	f6 cf       	rjmp	.-20     	; 0x698 <Endpoint_Write_Control_Stream_LE+0x8a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	08 95       	ret
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	08 95       	ret
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	08 95       	ret
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     6b8:	82 e0       	ldi	r24, 0x02	; 2
     6ba:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     6bc:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     6be:	08 95       	ret

000006c0 <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     6c0:	28 2f       	mov	r18, r24
     6c2:	39 2f       	mov	r19, r25
     6c4:	c9 01       	movw	r24, r18
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
     6c6:	20 91 2f 02 	lds	r18, 0x022F
     6ca:	30 91 30 02 	lds	r19, 0x0230
     6ce:	26 17       	cp	r18, r22
     6d0:	37 07       	cpc	r19, r23
     6d2:	18 f4       	brcc	.+6      	; 0x6da <Endpoint_Write_Control_PStream_LE+0x1a>
     6d4:	b9 01       	movw	r22, r18
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	34 c0       	rjmp	.+104    	; 0x742 <Endpoint_Write_Control_PStream_LE+0x82>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     6da:	61 15       	cp	r22, r1
     6dc:	71 05       	cpc	r23, r1
     6de:	d9 f7       	brne	.-10     	; 0x6d6 <Endpoint_Write_Control_PStream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6e0:	20 91 e8 00 	lds	r18, 0x00E8
     6e4:	2e 77       	andi	r18, 0x7E	; 126
     6e6:	20 93 e8 00 	sts	0x00E8, r18
     6ea:	f5 cf       	rjmp	.-22     	; 0x6d6 <Endpoint_Write_Control_PStream_LE+0x16>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     6ec:	20 91 e8 00 	lds	r18, 0x00E8
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
     6f0:	23 fd       	sbrc	r18, 3
     6f2:	39 c0       	rjmp	.+114    	; 0x766 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6f4:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
     6f8:	22 fd       	sbrc	r18, 2
     6fa:	2f c0       	rjmp	.+94     	; 0x75a <Endpoint_Write_Control_PStream_LE+0x9a>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     6fc:	2e b3       	in	r18, 0x1e	; 30
     6fe:	22 23       	and	r18, r18
     700:	b1 f1       	breq	.+108    	; 0x76e <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     702:	2e b3       	in	r18, 0x1e	; 30
     704:	25 30       	cpi	r18, 0x05	; 5
     706:	89 f1       	breq	.+98     	; 0x76a <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     708:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
     70c:	20 ff       	sbrs	r18, 0
     70e:	19 c0       	rjmp	.+50     	; 0x742 <Endpoint_Write_Control_PStream_LE+0x82>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     710:	20 91 f2 00 	lds	r18, 0x00F2
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     714:	08 c0       	rjmp	.+16     	; 0x726 <Endpoint_Write_Control_PStream_LE+0x66>
     716:	fc 01       	movw	r30, r24
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     71c:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
     720:	61 50       	subi	r22, 0x01	; 1
     722:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     724:	2f 5f       	subi	r18, 0xFF	; 255
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
     726:	61 15       	cp	r22, r1
     728:	71 05       	cpc	r23, r1
     72a:	11 f0       	breq	.+4      	; 0x730 <Endpoint_Write_Control_PStream_LE+0x70>
     72c:	28 30       	cpi	r18, 0x08	; 8
     72e:	98 f3       	brcs	.-26     	; 0x716 <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
     730:	31 e0       	ldi	r19, 0x01	; 1
     732:	28 30       	cpi	r18, 0x08	; 8
     734:	09 f0       	breq	.+2      	; 0x738 <Endpoint_Write_Control_PStream_LE+0x78>
     736:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     738:	20 91 e8 00 	lds	r18, 0x00E8
     73c:	2e 77       	andi	r18, 0x7E	; 126
     73e:	20 93 e8 00 	sts	0x00E8, r18
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     742:	61 15       	cp	r22, r1
     744:	71 05       	cpc	r23, r1
     746:	91 f6       	brne	.-92     	; 0x6ec <Endpoint_Write_Control_PStream_LE+0x2c>
     748:	33 23       	and	r19, r19
     74a:	81 f6       	brne	.-96     	; 0x6ec <Endpoint_Write_Control_PStream_LE+0x2c>
     74c:	06 c0       	rjmp	.+12     	; 0x75a <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     74e:	8e b3       	in	r24, 0x1e	; 30
     750:	88 23       	and	r24, r24
     752:	69 f0       	breq	.+26     	; 0x76e <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     754:	8e b3       	in	r24, 0x1e	; 30
     756:	85 30       	cpi	r24, 0x05	; 5
     758:	61 f0       	breq	.+24     	; 0x772 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     75a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
     75e:	82 ff       	sbrs	r24, 2
     760:	f6 cf       	rjmp	.-20     	; 0x74e <Endpoint_Write_Control_PStream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	08 95       	ret
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	08 95       	ret
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     76a:	83 e0       	ldi	r24, 0x03	; 3
     76c:	08 95       	ret
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     772:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     774:	08 95       	ret

00000776 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
     776:	61 15       	cp	r22, r1
     778:	71 05       	cpc	r23, r1
     77a:	19 f5       	brne	.+70     	; 0x7c2 <Endpoint_Read_Control_Stream_LE+0x4c>
     77c:	1d c0       	rjmp	.+58     	; 0x7b8 <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     77e:	20 91 e8 00 	lds	r18, 0x00E8
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
     782:	23 fd       	sbrc	r18, 3
     784:	2e c0       	rjmp	.+92     	; 0x7e2 <Endpoint_Read_Control_Stream_LE+0x6c>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
     786:	2e b3       	in	r18, 0x1e	; 30
     788:	22 23       	and	r18, r18
     78a:	79 f1       	breq	.+94     	; 0x7ea <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     78c:	2e b3       	in	r18, 0x1e	; 30
     78e:	25 30       	cpi	r18, 0x05	; 5
     790:	51 f1       	breq	.+84     	; 0x7e6 <Endpoint_Read_Control_Stream_LE+0x70>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     792:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
     796:	22 ff       	sbrs	r18, 2
     798:	f2 cf       	rjmp	.-28     	; 0x77e <Endpoint_Read_Control_Stream_LE+0x8>
     79a:	e8 2f       	mov	r30, r24
     79c:	f9 2f       	mov	r31, r25
     79e:	07 c0       	rjmp	.+14     	; 0x7ae <Endpoint_Read_Control_Stream_LE+0x38>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     7a0:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     7a4:	81 93       	st	Z+, r24
     7a6:	cf 01       	movw	r24, r30
				Length--;
     7a8:	61 50       	subi	r22, 0x01	; 1
     7aa:	70 40       	sbci	r23, 0x00	; 0
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
     7ac:	29 f0       	breq	.+10     	; 0x7b8 <Endpoint_Read_Control_Stream_LE+0x42>
     7ae:	cf 01       	movw	r24, r30
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     7b0:	20 91 f2 00 	lds	r18, 0x00F2
     7b4:	22 23       	and	r18, r18
     7b6:	a1 f7       	brne	.-24     	; 0x7a0 <Endpoint_Read_Control_Stream_LE+0x2a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     7b8:	20 91 e8 00 	lds	r18, 0x00E8
     7bc:	2b 77       	andi	r18, 0x7B	; 123
     7be:	20 93 e8 00 	sts	0x00E8, r18
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
	  Endpoint_ClearOUT();
	
	while (Length)
     7c2:	61 15       	cp	r22, r1
     7c4:	71 05       	cpc	r23, r1
     7c6:	d9 f6       	brne	.-74     	; 0x77e <Endpoint_Read_Control_Stream_LE+0x8>
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <Endpoint_Read_Control_Stream_LE+0x60>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     7ca:	8e b3       	in	r24, 0x1e	; 30
     7cc:	88 23       	and	r24, r24
     7ce:	69 f0       	breq	.+26     	; 0x7ea <Endpoint_Read_Control_Stream_LE+0x74>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
     7d0:	8e b3       	in	r24, 0x1e	; 30
     7d2:	85 30       	cpi	r24, 0x05	; 5
     7d4:	61 f0       	breq	.+24     	; 0x7ee <Endpoint_Read_Control_Stream_LE+0x78>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     7d6:	80 91 e8 00 	lds	r24, 0x00E8
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
     7da:	80 ff       	sbrs	r24, 0
     7dc:	f6 cf       	rjmp	.-20     	; 0x7ca <Endpoint_Read_Control_Stream_LE+0x54>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	08 95       	ret
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	08 95       	ret

		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     7e6:	83 e0       	ldi	r24, 0x03	; 3
     7e8:	08 95       	ret
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     7ea:	82 e0       	ldi	r24, 0x02	; 2
     7ec:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     7ee:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
     7f0:	08 95       	ret

000007f2 <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
     7f2:	42 d0       	rcall	.+132    	; 0x878 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     7f4:	44 d0       	rcall	.+136    	; 0x87e <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
     7f6:	1e ba       	out	0x1e, r1	; 30
	USB_ConfigurationNumber  = 0;
     7f8:	10 92 27 02 	sts	0x0227, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
     7fc:	10 92 26 02 	sts	0x0226, r1
	#endif
	
	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
     800:	10 92 25 02 	sts	0x0225, r1
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     804:	84 e0       	ldi	r24, 0x04	; 4
     806:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     808:	89 b5       	in	r24, 0x29	; 41
     80a:	82 60       	ori	r24, 0x02	; 2
     80c:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
     80e:	09 b4       	in	r0, 0x29	; 41
     810:	00 fe       	sbrs	r0, 0
     812:	fd cf       	rjmp	.-6      	; 0x80e <USB_ResetInterface+0x1c>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
     814:	80 91 d8 00 	lds	r24, 0x00D8
				
				USBCON = (Temp & ~(1 << USBE));
     818:	98 2f       	mov	r25, r24
     81a:	9f 77       	andi	r25, 0x7F	; 127
     81c:	90 93 d8 00 	sts	0x00D8, r25
				USBCON = (Temp |  (1 << USBE));
     820:	80 68       	ori	r24, 0x80	; 128
     822:	80 93 d8 00 	sts	0x00D8, r24
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
     826:	80 91 63 00 	lds	r24, 0x0063
     82a:	8e 7f       	andi	r24, 0xFE	; 254
     82c:	80 93 63 00 	sts	0x0063, r24
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     830:	80 91 d8 00 	lds	r24, 0x00D8
     834:	8f 7d       	andi	r24, 0xDF	; 223
     836:	80 93 d8 00 	sts	0x00D8, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     83a:	80 91 e0 00 	lds	r24, 0x00E0
     83e:	8e 7f       	andi	r24, 0xFE	; 254
     840:	80 93 e0 00 	sts	0x00E0, r24
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
     844:	80 91 e1 00 	lds	r24, 0x00E1
     848:	8e 7f       	andi	r24, 0xFE	; 254
     84a:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPEND);
     84e:	80 91 e2 00 	lds	r24, 0x00E2
     852:	81 60       	ori	r24, 0x01	; 1
     854:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Clear(USB_INT_EORSTI);
     858:	80 91 e1 00 	lds	r24, 0x00E1
     85c:	87 7f       	andi	r24, 0xF7	; 247
     85e:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_EORSTI);
     862:	80 91 e2 00 	lds	r24, 0x00E2
     866:	88 60       	ori	r24, 0x08	; 8
     868:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
     86c:	08 95       	ret

0000086e <USB_Init>:
		EVENT_USB_InitFailure(USB_INITERROR_NoUSBModeSpecified);
		return;
	}
	#endif
	
	USB_ResetInterface();
     86e:	c1 df       	rcall	.-126    	; 0x7f2 <USB_ResetInterface>

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	80 93 28 02 	sts	0x0228, r24
}
     876:	08 95       	ret

00000878 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     878:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     87c:	08 95       	ret

0000087e <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
     87e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     882:	08 95       	ret

00000884 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     884:	1f 92       	push	r1
     886:	0f 92       	push	r0
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	0f 92       	push	r0
     88c:	11 24       	eor	r1, r1
     88e:	2f 93       	push	r18
     890:	3f 93       	push	r19
     892:	4f 93       	push	r20
     894:	5f 93       	push	r21
     896:	6f 93       	push	r22
     898:	7f 93       	push	r23
     89a:	8f 93       	push	r24
     89c:	9f 93       	push	r25
     89e:	af 93       	push	r26
     8a0:	bf 93       	push	r27
     8a2:	ef 93       	push	r30
     8a4:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
     8a6:	80 91 e1 00 	lds	r24, 0x00E1
     8aa:	80 ff       	sbrs	r24, 0
     8ac:	1b c0       	rjmp	.+54     	; 0x8e4 <__vector_11+0x60>
     8ae:	80 91 e2 00 	lds	r24, 0x00E2
     8b2:	80 ff       	sbrs	r24, 0
     8b4:	17 c0       	rjmp	.+46     	; 0x8e4 <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
     8b6:	80 91 e1 00 	lds	r24, 0x00E1
     8ba:	8e 7f       	andi	r24, 0xFE	; 254
     8bc:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
     8c0:	80 91 e2 00 	lds	r24, 0x00E2
     8c4:	8e 7f       	andi	r24, 0xFE	; 254
     8c6:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
     8ca:	80 91 e2 00 	lds	r24, 0x00E2
     8ce:	80 61       	ori	r24, 0x10	; 16
     8d0:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
     8d4:	80 91 d8 00 	lds	r24, 0x00D8
     8d8:	80 62       	ori	r24, 0x20	; 32
     8da:	80 93 d8 00 	sts	0x00D8, r24
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
     8de:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     8e0:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
     8e2:	17 d2       	rcall	.+1070   	; 0xd12 <USB_Event_Stub>
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
     8e4:	80 91 e1 00 	lds	r24, 0x00E1
     8e8:	84 ff       	sbrs	r24, 4
     8ea:	29 c0       	rjmp	.+82     	; 0x93e <__vector_11+0xba>
     8ec:	80 91 e2 00 	lds	r24, 0x00E2
     8f0:	84 ff       	sbrs	r24, 4
     8f2:	25 c0       	rjmp	.+74     	; 0x93e <__vector_11+0xba>
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
     8f4:	84 e0       	ldi	r24, 0x04	; 4
     8f6:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
     8f8:	89 b5       	in	r24, 0x29	; 41
     8fa:	82 60       	ori	r24, 0x02	; 2
     8fc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     8fe:	09 b4       	in	r0, 0x29	; 41
     900:	00 fe       	sbrs	r0, 0
     902:	fd cf       	rjmp	.-6      	; 0x8fe <__vector_11+0x7a>
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
     904:	80 91 d8 00 	lds	r24, 0x00D8
     908:	8f 7d       	andi	r24, 0xDF	; 223
     90a:	80 93 d8 00 	sts	0x00D8, r24
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
     90e:	80 91 e1 00 	lds	r24, 0x00E1
     912:	8f 7e       	andi	r24, 0xEF	; 239
     914:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUP);
     918:	80 91 e2 00 	lds	r24, 0x00E2
     91c:	8f 7e       	andi	r24, 0xEF	; 239
     91e:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
     922:	80 91 e2 00 	lds	r24, 0x00E2
     926:	81 60       	ori	r24, 0x01	; 1
     928:	80 93 e2 00 	sts	0x00E2, r24
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     92c:	80 91 27 02 	lds	r24, 0x0227
     930:	88 23       	and	r24, r24
     932:	11 f0       	breq	.+4      	; 0x938 <__vector_11+0xb4>
     934:	84 e0       	ldi	r24, 0x04	; 4
     936:	01 c0       	rjmp	.+2      	; 0x93a <__vector_11+0xb6>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Connect();
     93c:	ea d1       	rcall	.+980    	; 0xd12 <USB_Event_Stub>
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     93e:	80 91 e1 00 	lds	r24, 0x00E1
     942:	83 ff       	sbrs	r24, 3
     944:	27 c0       	rjmp	.+78     	; 0x994 <__vector_11+0x110>
     946:	80 91 e2 00 	lds	r24, 0x00E2
     94a:	83 ff       	sbrs	r24, 3
     94c:	23 c0       	rjmp	.+70     	; 0x994 <__vector_11+0x110>
	{
		USB_INT_Clear(USB_INT_EORSTI);
     94e:	80 91 e1 00 	lds	r24, 0x00E1
     952:	87 7f       	andi	r24, 0xF7	; 247
     954:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	8e bb       	out	0x1e, r24	; 30
		USB_ConfigurationNumber = 0;
     95c:	10 92 27 02 	sts	0x0227, r1

		USB_INT_Clear(USB_INT_SUSPEND);
     960:	80 91 e1 00 	lds	r24, 0x00E1
     964:	8e 7f       	andi	r24, 0xFE	; 254
     966:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPEND);
     96a:	80 91 e2 00 	lds	r24, 0x00E2
     96e:	8e 7f       	andi	r24, 0xFE	; 254
     970:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
     974:	80 91 e2 00 	lds	r24, 0x00E2
     978:	80 61       	ori	r24, 0x10	; 16
     97a:	80 93 e2 00 	sts	0x00E2, r24

		Endpoint_ClearEndpoints();
     97e:	e5 dd       	rcall	.-1078   	; 0x54a <Endpoint_ClearEndpoints>
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	42 e0       	ldi	r20, 0x02	; 2
     986:	ce dd       	rcall	.-1124   	; 0x524 <Endpoint_ConfigureEndpoint_Prv>
		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
     988:	80 91 f0 00 	lds	r24, 0x00F0
     98c:	88 60       	ori	r24, 0x08	; 8
     98e:	80 93 f0 00 	sts	0x00F0, r24
		#endif

		EVENT_USB_Device_Reset();
     992:	bf d1       	rcall	.+894    	; 0xd12 <USB_Event_Stub>
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     994:	80 91 e1 00 	lds	r24, 0x00E1
     998:	82 ff       	sbrs	r24, 2
     99a:	0a c0       	rjmp	.+20     	; 0x9b0 <__vector_11+0x12c>
     99c:	80 91 e2 00 	lds	r24, 0x00E2
     9a0:	82 ff       	sbrs	r24, 2
     9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <__vector_11+0x12c>
	{
		USB_INT_Clear(USB_INT_SOFI);
     9a4:	80 91 e1 00 	lds	r24, 0x00E1
     9a8:	8b 7f       	andi	r24, 0xFB	; 251
     9aa:	80 93 e1 00 	sts	0x00E1, r24
		
		EVENT_USB_Device_StartOfFrame();
     9ae:	b1 d1       	rcall	.+866    	; 0xd12 <USB_Event_Stub>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
     9b0:	ff 91       	pop	r31
     9b2:	ef 91       	pop	r30
     9b4:	bf 91       	pop	r27
     9b6:	af 91       	pop	r26
     9b8:	9f 91       	pop	r25
     9ba:	8f 91       	pop	r24
     9bc:	7f 91       	pop	r23
     9be:	6f 91       	pop	r22
     9c0:	5f 91       	pop	r21
     9c2:	4f 91       	pop	r20
     9c4:	3f 91       	pop	r19
     9c6:	2f 91       	pop	r18
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	ef 92       	push	r14
     9de:	ff 92       	push	r15
     9e0:	0f 93       	push	r16
     9e2:	1f 93       	push	r17
     9e4:	2f 93       	push	r18
     9e6:	3f 93       	push	r19
     9e8:	4f 93       	push	r20
     9ea:	5f 93       	push	r21
     9ec:	6f 93       	push	r22
     9ee:	7f 93       	push	r23
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	af 93       	push	r26
     9f6:	bf 93       	push	r27
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
     9fc:	df 93       	push	r29
     9fe:	cf 93       	push	r28
     a00:	0f 92       	push	r0
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     a06:	89 ee       	ldi	r24, 0xE9	; 233
     a08:	e8 2e       	mov	r14, r24
     a0a:	f1 2c       	mov	r15, r1
     a0c:	f7 01       	movw	r30, r14
     a0e:	80 81       	ld	r24, Z
     a10:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     a12:	10 82       	st	Z, r1
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint(); 

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);
     a14:	00 ef       	ldi	r16, 0xF0	; 240
     a16:	10 e0       	ldi	r17, 0x00	; 0
     a18:	f8 01       	movw	r30, r16
     a1a:	90 81       	ld	r25, Z
     a1c:	97 7f       	andi	r25, 0xF7	; 247
     a1e:	90 83       	st	Z, r25

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
     a20:	78 94       	sei

	NONATOMIC_BLOCK(NONATOMIC_FORCEOFF)
	{
		USB_Device_ProcessControlRequest();
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	22 d0       	rcall	.+68     	; 0xa6a <USB_Device_ProcessControlRequest>
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
     a26:	f8 94       	cli
     a28:	f7 01       	movw	r30, r14
     a2a:	10 82       	st	Z, r1
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
     a2c:	f8 01       	movw	r30, r16
     a2e:	90 81       	ld	r25, Z
     a30:	98 60       	ori	r25, 0x08	; 8
     a32:	90 83       	st	Z, r25
     a34:	89 81       	ldd	r24, Y+1	; 0x01
     a36:	f7 01       	movw	r30, r14
     a38:	80 83       	st	Z, r24
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     a3a:	0f 90       	pop	r0
     a3c:	cf 91       	pop	r28
     a3e:	df 91       	pop	r29
     a40:	ff 91       	pop	r31
     a42:	ef 91       	pop	r30
     a44:	bf 91       	pop	r27
     a46:	af 91       	pop	r26
     a48:	9f 91       	pop	r25
     a4a:	8f 91       	pop	r24
     a4c:	7f 91       	pop	r23
     a4e:	6f 91       	pop	r22
     a50:	5f 91       	pop	r21
     a52:	4f 91       	pop	r20
     a54:	3f 91       	pop	r19
     a56:	2f 91       	pop	r18
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	ff 90       	pop	r15
     a5e:	ef 90       	pop	r14
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     a6a:	1f 93       	push	r17
     a6c:	df 93       	push	r29
     a6e:	cf 93       	push	r28
     a70:	cd b7       	in	r28, 0x3d	; 61
     a72:	de b7       	in	r29, 0x3e	; 62
     a74:	ac 97       	sbiw	r28, 0x2c	; 44
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
     a80:	e9 e2       	ldi	r30, 0x29	; 41
     a82:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     a84:	80 91 f1 00 	lds	r24, 0x00F1
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
     a88:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     a8a:	22 e0       	ldi	r18, 0x02	; 2
     a8c:	e1 33       	cpi	r30, 0x31	; 49
     a8e:	f2 07       	cpc	r31, r18
     a90:	c9 f7       	brne	.-14     	; 0xa84 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     a92:	80 91 29 02 	lds	r24, 0x0229
	
	switch (USB_ControlRequest.bRequest)
     a96:	20 91 2a 02 	lds	r18, 0x022A
     a9a:	25 30       	cpi	r18, 0x05	; 5
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <USB_Device_ProcessControlRequest+0x36>
     a9e:	84 c0       	rjmp	.+264    	; 0xba8 <USB_Device_ProcessControlRequest+0x13e>
     aa0:	26 30       	cpi	r18, 0x06	; 6
     aa2:	40 f4       	brcc	.+16     	; 0xab4 <USB_Device_ProcessControlRequest+0x4a>
     aa4:	21 30       	cpi	r18, 0x01	; 1
     aa6:	a1 f1       	breq	.+104    	; 0xb10 <USB_Device_ProcessControlRequest+0xa6>
     aa8:	21 30       	cpi	r18, 0x01	; 1
     aaa:	70 f0       	brcs	.+28     	; 0xac8 <USB_Device_ProcessControlRequest+0x5e>
     aac:	23 30       	cpi	r18, 0x03	; 3
     aae:	09 f0       	breq	.+2      	; 0xab2 <USB_Device_ProcessControlRequest+0x48>
     ab0:	17 c1       	rjmp	.+558    	; 0xce0 <USB_Device_ProcessControlRequest+0x276>
     ab2:	2e c0       	rjmp	.+92     	; 0xb10 <USB_Device_ProcessControlRequest+0xa6>
     ab4:	28 30       	cpi	r18, 0x08	; 8
     ab6:	09 f4       	brne	.+2      	; 0xaba <USB_Device_ProcessControlRequest+0x50>
     ab8:	e9 c0       	rjmp	.+466    	; 0xc8c <USB_Device_ProcessControlRequest+0x222>
     aba:	29 30       	cpi	r18, 0x09	; 9
     abc:	09 f4       	brne	.+2      	; 0xac0 <USB_Device_ProcessControlRequest+0x56>
     abe:	f8 c0       	rjmp	.+496    	; 0xcb0 <USB_Device_ProcessControlRequest+0x246>
     ac0:	26 30       	cpi	r18, 0x06	; 6
     ac2:	09 f0       	breq	.+2      	; 0xac6 <USB_Device_ProcessControlRequest+0x5c>
     ac4:	0d c1       	rjmp	.+538    	; 0xce0 <USB_Device_ProcessControlRequest+0x276>
     ac6:	8e c0       	rjmp	.+284    	; 0xbe4 <USB_Device_ProcessControlRequest+0x17a>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ac8:	80 38       	cpi	r24, 0x80	; 128
     aca:	21 f0       	breq	.+8      	; 0xad4 <USB_Device_ProcessControlRequest+0x6a>
     acc:	82 38       	cpi	r24, 0x82	; 130
     ace:	09 f0       	breq	.+2      	; 0xad2 <USB_Device_ProcessControlRequest+0x68>
     ad0:	07 c1       	rjmp	.+526    	; 0xce0 <USB_Device_ProcessControlRequest+0x276>
     ad2:	08 c0       	rjmp	.+16     	; 0xae4 <USB_Device_ProcessControlRequest+0x7a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     ad4:	80 91 25 02 	lds	r24, 0x0225
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
	#endif

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
			if (USB_RemoteWakeupEnabled)
     ad8:	90 91 26 02 	lds	r25, 0x0226
     adc:	99 23       	and	r25, r25
     ade:	71 f0       	breq	.+28     	; 0xafc <USB_Device_ProcessControlRequest+0x92>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     ae0:	82 60       	ori	r24, 0x02	; 2
     ae2:	0c c0       	rjmp	.+24     	; 0xafc <USB_Device_ProcessControlRequest+0x92>
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     ae4:	80 91 2d 02 	lds	r24, 0x022D
     ae8:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     aea:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     aee:	90 91 eb 00 	lds	r25, 0x00EB

			CurrentStatus = Endpoint_IsStalled();
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	95 ff       	sbrs	r25, 5
     af6:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     af8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     afc:	90 91 e8 00 	lds	r25, 0x00E8
     b00:	97 7f       	andi	r25, 0xF7	; 247
     b02:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
     b06:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
     b0a:	10 92 f1 00 	sts	0x00F1, r1
     b0e:	c9 c0       	rjmp	.+402    	; 0xca2 <USB_Device_ProcessControlRequest+0x238>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     b10:	88 23       	and	r24, r24
     b12:	19 f0       	breq	.+6      	; 0xb1a <USB_Device_ProcessControlRequest+0xb0>
     b14:	82 30       	cpi	r24, 0x02	; 2
     b16:	09 f0       	breq	.+2      	; 0xb1a <USB_Device_ProcessControlRequest+0xb0>
     b18:	e3 c0       	rjmp	.+454    	; 0xce0 <USB_Device_ProcessControlRequest+0x276>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	8f 71       	andi	r24, 0x1F	; 31
     b1e:	90 70       	andi	r25, 0x00	; 0
     b20:	00 97       	sbiw	r24, 0x00	; 0
     b22:	29 f0       	breq	.+10     	; 0xb2e <USB_Device_ProcessControlRequest+0xc4>
     b24:	82 30       	cpi	r24, 0x02	; 2
     b26:	91 05       	cpc	r25, r1
     b28:	09 f0       	breq	.+2      	; 0xb2c <USB_Device_ProcessControlRequest+0xc2>
     b2a:	db c0       	rjmp	.+438    	; 0xce2 <USB_Device_ProcessControlRequest+0x278>
     b2c:	0b c0       	rjmp	.+22     	; 0xb44 <USB_Device_ProcessControlRequest+0xda>
	{
#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
     b2e:	80 91 2b 02 	lds	r24, 0x022B
     b32:	81 30       	cpi	r24, 0x01	; 1
     b34:	09 f0       	breq	.+2      	; 0xb38 <USB_Device_ProcessControlRequest+0xce>
     b36:	d5 c0       	rjmp	.+426    	; 0xce2 <USB_Device_ProcessControlRequest+0x278>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b38:	23 30       	cpi	r18, 0x03	; 3
     b3a:	09 f0       	breq	.+2      	; 0xb3e <USB_Device_ProcessControlRequest+0xd4>
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	80 93 26 02 	sts	0x0226, r24
     b42:	2c c0       	rjmp	.+88     	; 0xb9c <USB_Device_ProcessControlRequest+0x132>
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
     b44:	80 91 2b 02 	lds	r24, 0x022B
     b48:	88 23       	and	r24, r24
     b4a:	41 f5       	brne	.+80     	; 0xb9c <USB_Device_ProcessControlRequest+0x132>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     b4c:	20 91 2d 02 	lds	r18, 0x022D
     b50:	27 70       	andi	r18, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
     b52:	09 f4       	brne	.+2      	; 0xb56 <USB_Device_ProcessControlRequest+0xec>
     b54:	c6 c0       	rjmp	.+396    	; 0xce2 <USB_Device_ProcessControlRequest+0x278>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b56:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     b5a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
     b5e:	80 ff       	sbrs	r24, 0
     b60:	c0 c0       	rjmp	.+384    	; 0xce2 <USB_Device_ProcessControlRequest+0x278>
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
     b62:	80 91 2a 02 	lds	r24, 0x022A
     b66:	83 30       	cpi	r24, 0x03	; 3
     b68:	21 f4       	brne	.+8      	; 0xb72 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     b6a:	80 91 eb 00 	lds	r24, 0x00EB
     b6e:	80 62       	ori	r24, 0x20	; 32
     b70:	13 c0       	rjmp	.+38     	; 0xb98 <USB_Device_ProcessControlRequest+0x12e>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     b72:	80 91 eb 00 	lds	r24, 0x00EB
     b76:	80 61       	ori	r24, 0x10	; 16
     b78:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <USB_Device_ProcessControlRequest+0x11c>
     b82:	88 0f       	add	r24, r24
     b84:	99 1f       	adc	r25, r25
     b86:	2a 95       	dec	r18
     b88:	e2 f7       	brpl	.-8      	; 0xb82 <USB_Device_ProcessControlRequest+0x118>
     b8a:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     b8e:	10 92 ea 00 	sts	0x00EA, r1
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     b92:	80 91 eb 00 	lds	r24, 0x00EB
     b96:	88 60       	ori	r24, 0x08	; 8
     b98:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     b9c:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ba0:	80 91 e8 00 	lds	r24, 0x00E8
     ba4:	87 7f       	andi	r24, 0xF7	; 247
     ba6:	80 c0       	rjmp	.+256    	; 0xca8 <USB_Device_ProcessControlRequest+0x23e>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     ba8:	88 23       	and	r24, r24
     baa:	09 f0       	breq	.+2      	; 0xbae <USB_Device_ProcessControlRequest+0x144>
     bac:	99 c0       	rjmp	.+306    	; 0xce0 <USB_Device_ProcessControlRequest+0x276>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     bae:	10 91 2b 02 	lds	r17, 0x022B
     bb2:	80 91 e8 00 	lds	r24, 0x00E8
     bb6:	87 7f       	andi	r24, 0xF7	; 247
     bb8:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
     bbc:	da dc       	rcall	.-1612   	; 0x572 <Endpoint_ClearStatusStage>
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <USB_Device_ProcessControlRequest+0x15e>
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
     bc0:	8e b3       	in	r24, 0x1e	; 30
     bc2:	88 23       	and	r24, r24
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <USB_Device_ProcessControlRequest+0x15e>
     bc6:	8d c0       	rjmp	.+282    	; 0xce2 <USB_Device_ProcessControlRequest+0x278>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
     bc8:	80 91 e8 00 	lds	r24, 0x00E8

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
	
	while (!(Endpoint_IsINReady()))
     bcc:	80 ff       	sbrs	r24, 0
     bce:	f8 cf       	rjmp	.-16     	; 0xbc0 <USB_Device_ProcessControlRequest+0x156>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     bd0:	1f 77       	andi	r17, 0x7F	; 127
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     bd2:	11 f0       	breq	.+4      	; 0xbd8 <USB_Device_ProcessControlRequest+0x16e>
     bd4:	83 e0       	ldi	r24, 0x03	; 3
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <USB_Device_ProcessControlRequest+0x170>
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	8e bb       	out	0x1e, r24	; 30
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
     bdc:	10 68       	ori	r17, 0x80	; 128
     bde:	10 93 e3 00 	sts	0x00E3, r17
     be2:	7f c0       	rjmp	.+254    	; 0xce2 <USB_Device_ProcessControlRequest+0x278>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     be4:	80 58       	subi	r24, 0x80	; 128
     be6:	82 30       	cpi	r24, 0x02	; 2
     be8:	08 f0       	brcs	.+2      	; 0xbec <USB_Device_ProcessControlRequest+0x182>
     bea:	7a c0       	rjmp	.+244    	; 0xce0 <USB_Device_ProcessControlRequest+0x276>
	#if !defined(USE_FLASH_DESCRIPTORS) && !defined(USE_EEPROM_DESCRIPTORS) && !defined(USE_RAM_DESCRIPTORS)
	uint8_t  DescriptorAddressSpace;
	#endif
	
	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     bec:	80 91 2b 02 	lds	r24, 0x022B
     bf0:	90 91 2c 02 	lds	r25, 0x022C
     bf4:	23 e0       	ldi	r18, 0x03	; 3
     bf6:	8c 3d       	cpi	r24, 0xDC	; 220
     bf8:	92 07       	cpc	r25, r18
     bfa:	89 f5       	brne	.+98     	; 0xc5e <USB_Device_ProcessControlRequest+0x1f4>
	{
		USB_Descriptor_Header_t Header;
		int16_t                 UnicodeString[20];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = sizeof(SignatureDescriptor);
     c00:	8a e2       	ldi	r24, 0x2A	; 42
     c02:	8b 83       	std	Y+3, r24	; 0x03
	
	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     c04:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     c06:	f8 94       	cli
     c08:	de 01       	movw	r26, r28
     c0a:	15 96       	adiw	r26, 0x05	; 5
     c0c:	80 e0       	ldi	r24, 0x00	; 0
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	2e e0       	ldi	r18, 0x0E	; 14
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
		{
			uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     c12:	41 e2       	ldi	r20, 0x21	; 33
     c14:	e2 2f       	mov	r30, r18
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	40 93 57 00 	sts	0x0057, r20
     c1c:	e4 91       	lpm	r30, Z+
			
			if (SerialCharNum & 0x01)
     c1e:	80 ff       	sbrs	r24, 0
     c20:	03 c0       	rjmp	.+6      	; 0xc28 <USB_Device_ProcessControlRequest+0x1be>
			{
				SerialByte >>= 4;
     c22:	e2 95       	swap	r30
     c24:	ef 70       	andi	r30, 0x0F	; 15
				SigReadAddress++;
     c26:	2f 5f       	subi	r18, 0xFF	; 255
}

#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
static char USB_Device_NibbleToASCII(uint8_t Nibble)
{
	Nibble = ((Nibble & 0x0F) + '0');
     c28:	ef 70       	andi	r30, 0x0F	; 15
     c2a:	5e 2f       	mov	r21, r30
     c2c:	50 5d       	subi	r21, 0xD0	; 208
	return (Nibble > '9') ? (Nibble + ('A' - '9' - 1)) : Nibble;
     c2e:	5a 33       	cpi	r21, 0x3A	; 58
     c30:	08 f0       	brcs	.+2      	; 0xc34 <USB_Device_ProcessControlRequest+0x1ca>
     c32:	59 5f       	subi	r21, 0xF9	; 249
			{
				SerialByte >>= 4;
				SigReadAddress++;
			}
			
			SignatureDescriptor.UnicodeString[SerialCharNum] = USB_Device_NibbleToASCII(SerialByte);
     c34:	5c 93       	st	X, r21
     c36:	11 96       	adiw	r26, 0x01	; 1
     c38:	1c 92       	st	X, r1
     c3a:	11 97       	sbiw	r26, 0x01	; 1
     c3c:	12 96       	adiw	r26, 0x02	; 2
     c3e:	01 96       	adiw	r24, 0x01	; 1
	
	uint8_t SigReadAddress = 0x0E;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		for (uint8_t SerialCharNum = 0; SerialCharNum < 20; SerialCharNum++)
     c40:	84 31       	cpi	r24, 0x14	; 20
     c42:	91 05       	cpc	r25, r1
     c44:	39 f7       	brne	.-50     	; 0xc14 <USB_Device_ProcessControlRequest+0x1aa>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     c46:	3f bf       	out	0x3f, r19	; 63
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c48:	80 91 e8 00 	lds	r24, 0x00E8
     c4c:	87 7f       	andi	r24, 0xF7	; 247
     c4e:	80 93 e8 00 	sts	0x00E8, r24
		}
	}
	
	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     c52:	ce 01       	movw	r24, r28
     c54:	03 96       	adiw	r24, 0x03	; 3
     c56:	6a e2       	ldi	r22, 0x2A	; 42
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	d9 dc       	rcall	.-1614   	; 0x60e <Endpoint_Write_Control_Stream_LE>
     c5c:	11 c0       	rjmp	.+34     	; 0xc80 <USB_Device_ProcessControlRequest+0x216>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     c5e:	60 91 2d 02 	lds	r22, 0x022D
     c62:	ae 01       	movw	r20, r28
     c64:	4f 5f       	subi	r20, 0xFF	; 255
     c66:	5f 4f       	sbci	r21, 0xFF	; 255
     c68:	22 dc       	rcall	.-1980   	; 0x4ae <CALLBACK_USB_GetDescriptor>
     c6a:	bc 01       	movw	r22, r24
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	c9 f1       	breq	.+114    	; 0xce2 <USB_Device_ProcessControlRequest+0x278>
     c70:	80 91 e8 00 	lds	r24, 0x00E8
     c74:	87 7f       	andi	r24, 0xF7	; 247
     c76:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	20 dd       	rcall	.-1472   	; 0x6c0 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     c80:	80 91 e8 00 	lds	r24, 0x00E8
     c84:	8b 77       	andi	r24, 0x7B	; 123
     c86:	80 93 e8 00 	sts	0x00E8, r24
     c8a:	2b c0       	rjmp	.+86     	; 0xce2 <USB_Device_ProcessControlRequest+0x278>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     c8c:	80 38       	cpi	r24, 0x80	; 128
     c8e:	41 f5       	brne	.+80     	; 0xce0 <USB_Device_ProcessControlRequest+0x276>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c90:	80 91 e8 00 	lds	r24, 0x00E8
     c94:	87 7f       	andi	r24, 0xF7	; 247
     c96:	80 93 e8 00 	sts	0x00E8, r24

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
     c9a:	80 91 27 02 	lds	r24, 0x0227
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     c9e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ca2:	80 91 e8 00 	lds	r24, 0x00E8
     ca6:	8e 77       	andi	r24, 0x7E	; 126
     ca8:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     cac:	62 dc       	rcall	.-1852   	; 0x572 <Endpoint_ClearStatusStage>
     cae:	19 c0       	rjmp	.+50     	; 0xce2 <USB_Device_ProcessControlRequest+0x278>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cb0:	88 23       	and	r24, r24
     cb2:	b1 f4       	brne	.+44     	; 0xce0 <USB_Device_ProcessControlRequest+0x276>
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     cb4:	90 91 2b 02 	lds	r25, 0x022B
     cb8:	92 30       	cpi	r25, 0x02	; 2
     cba:	98 f4       	brcc	.+38     	; 0xce2 <USB_Device_ProcessControlRequest+0x278>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cbc:	80 91 e8 00 	lds	r24, 0x00E8
     cc0:	87 7f       	andi	r24, 0xF7	; 247
     cc2:	80 93 e8 00 	sts	0x00E8, r24
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     cc6:	90 93 27 02 	sts	0x0227, r25

	Endpoint_ClearStatusStage();
     cca:	53 dc       	rcall	.-1882   	; 0x572 <Endpoint_ClearStatusStage>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
     ccc:	80 91 27 02 	lds	r24, 0x0227
     cd0:	88 23       	and	r24, r24
     cd2:	11 f0       	breq	.+4      	; 0xcd8 <USB_Device_ProcessControlRequest+0x26e>
     cd4:	84 e0       	ldi	r24, 0x04	; 4
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <USB_Device_ProcessControlRequest+0x270>
     cd8:	83 e0       	ldi	r24, 0x03	; 3
     cda:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     cdc:	44 db       	rcall	.-2424   	; 0x366 <EVENT_USB_Device_ConfigurationChanged>
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <USB_Device_ProcessControlRequest+0x278>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
     ce0:	45 db       	rcall	.-2422   	; 0x36c <EVENT_USB_Device_UnhandledControlRequest>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     ce2:	80 91 e8 00 	lds	r24, 0x00E8
	  
	if (Endpoint_IsSETUPReceived())
     ce6:	83 ff       	sbrs	r24, 3
     ce8:	0a c0       	rjmp	.+20     	; 0xcfe <USB_Device_ProcessControlRequest+0x294>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cea:	80 91 eb 00 	lds	r24, 0x00EB
     cee:	80 62       	ori	r24, 0x20	; 32
     cf0:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cf4:	80 91 e8 00 	lds	r24, 0x00E8
     cf8:	87 7f       	andi	r24, 0xF7	; 247
     cfa:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();		
	}
}
     cfe:	ac 96       	adiw	r28, 0x2c	; 44
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	f8 94       	cli
     d04:	de bf       	out	0x3e, r29	; 62
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	cd bf       	out	0x3d, r28	; 61
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	1f 91       	pop	r17
     d10:	08 95       	ret

00000d12 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     d12:	08 95       	ret

00000d14 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     d14:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     d16:	8e b3       	in	r24, 0x1e	; 30
     d18:	88 23       	and	r24, r24
     d1a:	61 f0       	breq	.+24     	; 0xd34 <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
     d1c:	10 91 e9 00 	lds	r17, 0x00E9
     d20:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d22:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d26:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     d2a:	83 ff       	sbrs	r24, 3
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <USB_USBTask+0x1c>
		  USB_Device_ProcessControlRequest();
     d2e:	9d de       	rcall	.-710    	; 0xa6a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     d30:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
     d34:	1f 91       	pop	r17
     d36:	08 95       	ret

00000d38 <Endpoint_ConfigureEndpointDynamic>:
			static inline bool Endpoint_ConfigureEndpointDynamic(const uint8_t Number,
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	0f 92       	push	r0
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	18 2f       	mov	r17, r24
     d4a:	f4 2e       	mov	r15, r20
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
     d4c:	c9 01       	movw	r24, r18
     d4e:	69 83       	std	Y+1, r22	; 0x01
     d50:	db db       	rcall	.-2122   	; 0x508 <Endpoint_BytesToEPSizeMaskDynamic>
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
     d52:	69 81       	ldd	r22, Y+1	; 0x01
     d54:	62 95       	swap	r22
     d56:	66 0f       	add	r22, r22
     d58:	66 0f       	add	r22, r22
     d5a:	60 7c       	andi	r22, 0xC0	; 192
     d5c:	6f 29       	or	r22, r15
     d5e:	40 2f       	mov	r20, r16
     d60:	42 60       	ori	r20, 0x02	; 2
     d62:	48 2b       	or	r20, r24
     d64:	81 2f       	mov	r24, r17
     d66:	de db       	rcall	.-2116   	; 0x524 <Endpoint_ConfigureEndpoint_Prv>
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
			}
     d68:	0f 90       	pop	r0
     d6a:	cf 91       	pop	r28
     d6c:	df 91       	pop	r29
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	08 95       	ret

00000d76 <CDC_Device_Event_Stub>:
#include "CDC.h"

void CDC_Device_Event_Stub(void)
{

}
     d76:	08 95       	ret

00000d78 <CDC_Device_ProcessControlRequest>:

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	ec 01       	movw	r28, r24
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     d7e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     d82:	83 ff       	sbrs	r24, 3
     d84:	60 c0       	rjmp	.+192    	; 0xe46 <CDC_Device_ProcessControlRequest+0xce>
	  return;
	  
	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     d86:	88 81       	ld	r24, Y
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	20 91 2d 02 	lds	r18, 0x022D
     d8e:	30 91 2e 02 	lds	r19, 0x022E
     d92:	28 17       	cp	r18, r24
     d94:	39 07       	cpc	r19, r25
     d96:	09 f0       	breq	.+2      	; 0xd9a <CDC_Device_ProcessControlRequest+0x22>
     d98:	56 c0       	rjmp	.+172    	; 0xe46 <CDC_Device_ProcessControlRequest+0xce>
	  return;

	switch (USB_ControlRequest.bRequest)
     d9a:	80 91 2a 02 	lds	r24, 0x022A
     d9e:	81 32       	cpi	r24, 0x21	; 33
     da0:	61 f0       	breq	.+24     	; 0xdba <CDC_Device_ProcessControlRequest+0x42>
     da2:	82 32       	cpi	r24, 0x22	; 34
     da4:	20 f4       	brcc	.+8      	; 0xdae <CDC_Device_ProcessControlRequest+0x36>
     da6:	80 32       	cpi	r24, 0x20	; 32
     da8:	09 f0       	breq	.+2      	; 0xdac <CDC_Device_ProcessControlRequest+0x34>
     daa:	4d c0       	rjmp	.+154    	; 0xe46 <CDC_Device_ProcessControlRequest+0xce>
     dac:	19 c0       	rjmp	.+50     	; 0xde0 <CDC_Device_ProcessControlRequest+0x68>
     dae:	82 32       	cpi	r24, 0x22	; 34
     db0:	69 f1       	breq	.+90     	; 0xe0c <CDC_Device_ProcessControlRequest+0x94>
     db2:	83 32       	cpi	r24, 0x23	; 35
     db4:	09 f0       	breq	.+2      	; 0xdb8 <CDC_Device_ProcessControlRequest+0x40>
     db6:	47 c0       	rjmp	.+142    	; 0xe46 <CDC_Device_ProcessControlRequest+0xce>
     db8:	38 c0       	rjmp	.+112    	; 0xe2a <CDC_Device_ProcessControlRequest+0xb2>
	{
		case REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     dba:	80 91 29 02 	lds	r24, 0x0229
     dbe:	81 3a       	cpi	r24, 0xA1	; 161
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <CDC_Device_ProcessControlRequest+0x4c>
     dc2:	41 c0       	rjmp	.+130    	; 0xe46 <CDC_Device_ProcessControlRequest+0xce>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dc4:	80 91 e8 00 	lds	r24, 0x00E8
     dc8:	87 7f       	andi	r24, 0xF7	; 247
     dca:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Write_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     dce:	ce 01       	movw	r24, r28
     dd0:	0f 96       	adiw	r24, 0x0f	; 15
     dd2:	67 e0       	ldi	r22, 0x07	; 7
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	1b dc       	rcall	.-1994   	; 0x60e <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dd8:	80 91 e8 00 	lds	r24, 0x00E8
     ddc:	8b 77       	andi	r24, 0x7B	; 123
     dde:	13 c0       	rjmp	.+38     	; 0xe06 <CDC_Device_ProcessControlRequest+0x8e>
				Endpoint_ClearOUT();
			}
			
			break;
		case REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     de0:	80 91 29 02 	lds	r24, 0x0229
     de4:	81 32       	cpi	r24, 0x21	; 33
     de6:	79 f5       	brne	.+94     	; 0xe46 <CDC_Device_ProcessControlRequest+0xce>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     de8:	80 91 e8 00 	lds	r24, 0x00E8
     dec:	87 7f       	andi	r24, 0xF7	; 247
     dee:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_Read_Control_Stream_LE(&CDCInterfaceInfo->State.LineEncoding, sizeof(CDCInterfaceInfo->State.LineEncoding));
     df2:	ce 01       	movw	r24, r28
     df4:	0f 96       	adiw	r24, 0x0f	; 15
     df6:	67 e0       	ldi	r22, 0x07	; 7
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	bd dc       	rcall	.-1670   	; 0x776 <Endpoint_Read_Control_Stream_LE>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
     dfc:	ce 01       	movw	r24, r28
     dfe:	b9 da       	rcall	.-2702   	; 0x372 <EVENT_CDC_Device_LineEncodingChanged>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     e00:	80 91 e8 00 	lds	r24, 0x00E8
     e04:	8e 77       	andi	r24, 0x7E	; 126
     e06:	80 93 e8 00 	sts	0x00E8, r24
     e0a:	1d c0       	rjmp	.+58     	; 0xe46 <CDC_Device_ProcessControlRequest+0xce>
				Endpoint_ClearIN();
			}
	
			break;
		case REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e0c:	80 91 29 02 	lds	r24, 0x0229
     e10:	81 32       	cpi	r24, 0x21	; 33
     e12:	c9 f4       	brne	.+50     	; 0xe46 <CDC_Device_ProcessControlRequest+0xce>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e14:	80 91 e8 00 	lds	r24, 0x00E8
     e18:	87 7f       	andi	r24, 0xF7	; 247
     e1a:	80 93 e8 00 	sts	0x00E8, r24
			{				
				Endpoint_ClearSETUP();
				
				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
     e1e:	80 91 2b 02 	lds	r24, 0x022B
     e22:	8d 87       	std	Y+13, r24	; 0x0d
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
     e24:	ce 01       	movw	r24, r28
     e26:	3b db       	rcall	.-2442   	; 0x49e <EVENT_CDC_Device_ControLineStateChanged>
     e28:	0d c0       	rjmp	.+26     	; 0xe44 <CDC_Device_ProcessControlRequest+0xcc>
				Endpoint_ClearStatusStage();
			}
	
			break;
		case REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     e2a:	80 91 29 02 	lds	r24, 0x0229
     e2e:	81 32       	cpi	r24, 0x21	; 33
     e30:	51 f4       	brne	.+20     	; 0xe46 <CDC_Device_ProcessControlRequest+0xce>
     e32:	80 91 e8 00 	lds	r24, 0x00E8
     e36:	87 7f       	andi	r24, 0xF7	; 247
     e38:	80 93 e8 00 	sts	0x00E8, r24
			{				
				Endpoint_ClearSETUP();
				
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
     e3c:	ce 01       	movw	r24, r28
     e3e:	60 91 2b 02 	lds	r22, 0x022B
     e42:	99 df       	rcall	.-206    	; 0xd76 <CDC_Device_Event_Stub>

				Endpoint_ClearStatusStage();
     e44:	96 db       	rcall	.-2260   	; 0x572 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
     e46:	df 91       	pop	r29
     e48:	cf 91       	pop	r28
     e4a:	08 95       	ret

00000e4c <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e4c:	0f 93       	push	r16
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
     e52:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     e54:	0d 96       	adiw	r24, 0x0d	; 13
     e56:	fc 01       	movw	r30, r24
     e58:	89 e0       	ldi	r24, 0x09	; 9
     e5a:	df 01       	movw	r26, r30
     e5c:	1d 92       	st	X+, r1
     e5e:	8a 95       	dec	r24
     e60:	e9 f7       	brne	.-6      	; 0xe5c <CDC_Device_ConfigureEndpoints+0x10>

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber, EP_TYPE_BULK,
     e62:	2a 81       	ldd	r18, Y+2	; 0x02
     e64:	3b 81       	ldd	r19, Y+3	; 0x03
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9c 81       	ldd	r25, Y+4	; 0x04
     e6a:	99 23       	and	r25, r25
     e6c:	11 f0       	breq	.+4      	; 0xe72 <CDC_Device_ConfigureEndpoints+0x26>
     e6e:	04 e0       	ldi	r16, 0x04	; 4
     e70:	01 c0       	rjmp	.+2      	; 0xe74 <CDC_Device_ConfigureEndpoints+0x28>
     e72:	00 e0       	ldi	r16, 0x00	; 0
     e74:	62 e0       	ldi	r22, 0x02	; 2
     e76:	41 e0       	ldi	r20, 0x01	; 1
     e78:	5f df       	rcall	.-322    	; 0xd38 <Endpoint_ConfigureEndpointDynamic>
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	d9 f4       	brne	.+54     	; 0xeb4 <CDC_Device_ConfigureEndpoints+0x68>
							         CDCInterfaceInfo->Config.DataINEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
     e7e:	2e 81       	ldd	r18, Y+6	; 0x06
     e80:	3f 81       	ldd	r19, Y+7	; 0x07
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	98 85       	ldd	r25, Y+8	; 0x08
     e86:	99 23       	and	r25, r25
     e88:	11 f0       	breq	.+4      	; 0xe8e <CDC_Device_ConfigureEndpoints+0x42>
     e8a:	04 e0       	ldi	r16, 0x04	; 4
     e8c:	01 c0       	rjmp	.+2      	; 0xe90 <CDC_Device_ConfigureEndpoints+0x44>
     e8e:	00 e0       	ldi	r16, 0x00	; 0
     e90:	62 e0       	ldi	r22, 0x02	; 2
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	51 df       	rcall	.-350    	; 0xd38 <Endpoint_ConfigureEndpointDynamic>
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	69 f4       	brne	.+26     	; 0xeb4 <CDC_Device_ConfigureEndpoints+0x68>
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
	}

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.NotificationEndpointNumber, EP_TYPE_INTERRUPT,
     e9a:	2a 85       	ldd	r18, Y+10	; 0x0a
     e9c:	3b 85       	ldd	r19, Y+11	; 0x0b
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	9c 85       	ldd	r25, Y+12	; 0x0c
     ea2:	99 23       	and	r25, r25
     ea4:	11 f0       	breq	.+4      	; 0xeaa <CDC_Device_ConfigureEndpoints+0x5e>
     ea6:	04 e0       	ldi	r16, 0x04	; 4
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <CDC_Device_ConfigureEndpoints+0x60>
     eaa:	00 e0       	ldi	r16, 0x00	; 0
     eac:	63 e0       	ldi	r22, 0x03	; 3
     eae:	41 e0       	ldi	r20, 0x01	; 1
     eb0:	43 df       	rcall	.-378    	; 0xd38 <Endpoint_ConfigureEndpointDynamic>
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <CDC_Device_ConfigureEndpoints+0x6a>

	if (!(Endpoint_ConfigureEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber, EP_TYPE_BULK,
	                                 ENDPOINT_DIR_OUT, CDCInterfaceInfo->Config.DataOUTEndpointSize,
	                                 CDCInterfaceInfo->Config.DataOUTEndpointDoubleBank ? ENDPOINT_BANK_DOUBLE : ENDPOINT_BANK_SINGLE)))
	{
		return false;
     eb4:	80 e0       	ldi	r24, 0x00	; 0
	{
		return false;
	}

	return true;
}
     eb6:	df 91       	pop	r29
     eb8:	cf 91       	pop	r28
     eba:	0f 91       	pop	r16
     ebc:	08 95       	ret

00000ebe <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Data, Length, NO_STREAM_CALLBACK);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	0f 92       	push	r0
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     eca:	8e b3       	in	r24, 0x1e	; 30
     ecc:	84 30       	cpi	r24, 0x04	; 4
     ece:	f1 f4       	brne	.+60     	; 0xf0c <CDC_Device_SendByte+0x4e>
     ed0:	27 85       	ldd	r18, Z+15	; 0x0f
     ed2:	30 89       	ldd	r19, Z+16	; 0x10
     ed4:	41 89       	ldd	r20, Z+17	; 0x11
     ed6:	52 89       	ldd	r21, Z+18	; 0x12
     ed8:	21 15       	cp	r18, r1
     eda:	31 05       	cpc	r19, r1
     edc:	41 05       	cpc	r20, r1
     ede:	51 05       	cpc	r21, r1
     ee0:	a9 f0       	breq	.+42     	; 0xf0c <CDC_Device_SendByte+0x4e>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     ee2:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     ee4:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ee8:	80 91 e8 00 	lds	r24, 0x00E8

	if (!(Endpoint_IsReadWriteAllowed()))
     eec:	85 fd       	sbrc	r24, 5
     eee:	0a c0       	rjmp	.+20     	; 0xf04 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ef0:	80 91 e8 00 	lds	r24, 0x00E8
     ef4:	8e 77       	andi	r24, 0x7E	; 126
     ef6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     efa:	69 83       	std	Y+1, r22	; 0x01
     efc:	59 db       	rcall	.-2382   	; 0x5b0 <Endpoint_WaitUntilReady>
     efe:	69 81       	ldd	r22, Y+1	; 0x01
     f00:	88 23       	and	r24, r24
     f02:	29 f4       	brne	.+10     	; 0xf0e <CDC_Device_SendByte+0x50>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     f04:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	01 c0       	rjmp	.+2      	; 0xf0e <CDC_Device_SendByte+0x50>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f0c:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_Byte(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     f0e:	0f 90       	pop	r0
     f10:	cf 91       	pop	r28
     f12:	df 91       	pop	r29
     f14:	08 95       	ret

00000f16 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f16:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f18:	8e b3       	in	r24, 0x1e	; 30
     f1a:	84 30       	cpi	r24, 0x04	; 4
     f1c:	11 f5       	brne	.+68     	; 0xf62 <CDC_Device_Flush+0x4c>
     f1e:	27 85       	ldd	r18, Z+15	; 0x0f
     f20:	30 89       	ldd	r19, Z+16	; 0x10
     f22:	41 89       	ldd	r20, Z+17	; 0x11
     f24:	52 89       	ldd	r21, Z+18	; 0x12
     f26:	21 15       	cp	r18, r1
     f28:	31 05       	cpc	r19, r1
     f2a:	41 05       	cpc	r20, r1
     f2c:	51 05       	cpc	r21, r1
     f2e:	c9 f0       	breq	.+50     	; 0xf62 <CDC_Device_Flush+0x4c>
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);
     f30:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     f32:	80 93 e9 00 	sts	0x00E9, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     f36:	80 91 f2 00 	lds	r24, 0x00F2

	if (!(Endpoint_BytesInEndpoint()))
     f3a:	88 23       	and	r24, r24
     f3c:	a1 f0       	breq	.+40     	; 0xf66 <CDC_Device_Flush+0x50>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f3e:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f42:	80 91 e8 00 	lds	r24, 0x00E8
     f46:	8e 77       	andi	r24, 0x7E	; 126
     f48:	80 93 e8 00 	sts	0x00E8, r24
	
	bool BankFull = !(Endpoint_IsReadWriteAllowed());
	
	Endpoint_ClearIN();
	
	if (BankFull)
     f4c:	95 fd       	sbrc	r25, 5
     f4e:	0d c0       	rjmp	.+26     	; 0xf6a <CDC_Device_Flush+0x54>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f50:	2f db       	rcall	.-2466   	; 0x5b0 <Endpoint_WaitUntilReady>
     f52:	88 23       	and	r24, r24
     f54:	59 f4       	brne	.+22     	; 0xf6c <CDC_Device_Flush+0x56>
     f56:	90 91 e8 00 	lds	r25, 0x00E8
     f5a:	9e 77       	andi	r25, 0x7E	; 126
     f5c:	90 93 e8 00 	sts	0x00E8, r25
     f60:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpointNumber);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}
	
	return ENDPOINT_READYWAIT_NoError;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
}
     f6c:	08 95       	ret

00000f6e <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f6e:	2e b3       	in	r18, 0x1e	; 30
     f70:	24 30       	cpi	r18, 0x04	; 4
     f72:	59 f4       	brne	.+22     	; 0xf8a <CDC_Device_USBTask+0x1c>
     f74:	fc 01       	movw	r30, r24
     f76:	27 85       	ldd	r18, Z+15	; 0x0f
     f78:	30 89       	ldd	r19, Z+16	; 0x10
     f7a:	41 89       	ldd	r20, Z+17	; 0x11
     f7c:	52 89       	ldd	r21, Z+18	; 0x12
     f7e:	21 15       	cp	r18, r1
     f80:	31 05       	cpc	r19, r1
     f82:	41 05       	cpc	r20, r1
     f84:	51 05       	cpc	r21, r1
     f86:	09 f0       	breq	.+2      	; 0xf8a <CDC_Device_USBTask+0x1c>
	  return;
	  
	CDC_Device_Flush(CDCInterfaceInfo);
     f88:	c6 cf       	rjmp	.-116    	; 0xf16 <CDC_Device_Flush>
     f8a:	08 95       	ret

00000f8c <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f8c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f8e:	8e b3       	in	r24, 0x1e	; 30
     f90:	84 30       	cpi	r24, 0x04	; 4
     f92:	21 f5       	brne	.+72     	; 0xfdc <CDC_Device_ReceiveByte+0x50>
     f94:	27 85       	ldd	r18, Z+15	; 0x0f
     f96:	30 89       	ldd	r19, Z+16	; 0x10
     f98:	41 89       	ldd	r20, Z+17	; 0x11
     f9a:	52 89       	ldd	r21, Z+18	; 0x12
     f9c:	21 15       	cp	r18, r1
     f9e:	31 05       	cpc	r19, r1
     fa0:	41 05       	cpc	r20, r1
     fa2:	51 05       	cpc	r21, r1
     fa4:	d9 f0       	breq	.+54     	; 0xfdc <CDC_Device_ReceiveByte+0x50>
	  return -1;

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpointNumber);
     fa6:	85 81       	ldd	r24, Z+5	; 0x05
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
     fa8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fac:	80 91 e8 00 	lds	r24, 0x00E8
	
	if (Endpoint_IsOUTReceived())
     fb0:	82 ff       	sbrs	r24, 2
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <CDC_Device_ReceiveByte+0x50>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     fb4:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     fb8:	88 23       	and	r24, r24
     fba:	21 f0       	breq	.+8      	; 0xfc4 <CDC_Device_ReceiveByte+0x38>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     fbc:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_Byte();
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <CDC_Device_ReceiveByte+0x3c>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     fc4:	2f ef       	ldi	r18, 0xFF	; 255
     fc6:	3f ef       	ldi	r19, 0xFF	; 255
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     fc8:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_Byte();
	
		if (!(Endpoint_BytesInEndpoint()))
     fcc:	88 23       	and	r24, r24
     fce:	41 f4       	brne	.+16     	; 0xfe0 <CDC_Device_ReceiveByte+0x54>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     fd0:	80 91 e8 00 	lds	r24, 0x00E8
     fd4:	8b 77       	andi	r24, 0x7B	; 123
     fd6:	80 93 e8 00 	sts	0x00E8, r24
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <CDC_Device_ReceiveByte+0x54>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     fdc:	2f ef       	ldi	r18, 0xFF	; 255
     fde:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}
	
	return ReceivedByte;
}
     fe0:	c9 01       	movw	r24, r18
     fe2:	08 95       	ret

00000fe4 <__udivmodsi4>:
     fe4:	a1 e2       	ldi	r26, 0x21	; 33
     fe6:	1a 2e       	mov	r1, r26
     fe8:	aa 1b       	sub	r26, r26
     fea:	bb 1b       	sub	r27, r27
     fec:	fd 01       	movw	r30, r26
     fee:	0d c0       	rjmp	.+26     	; 0x100a <__udivmodsi4_ep>

00000ff0 <__udivmodsi4_loop>:
     ff0:	aa 1f       	adc	r26, r26
     ff2:	bb 1f       	adc	r27, r27
     ff4:	ee 1f       	adc	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	a2 17       	cp	r26, r18
     ffa:	b3 07       	cpc	r27, r19
     ffc:	e4 07       	cpc	r30, r20
     ffe:	f5 07       	cpc	r31, r21
    1000:	20 f0       	brcs	.+8      	; 0x100a <__udivmodsi4_ep>
    1002:	a2 1b       	sub	r26, r18
    1004:	b3 0b       	sbc	r27, r19
    1006:	e4 0b       	sbc	r30, r20
    1008:	f5 0b       	sbc	r31, r21

0000100a <__udivmodsi4_ep>:
    100a:	66 1f       	adc	r22, r22
    100c:	77 1f       	adc	r23, r23
    100e:	88 1f       	adc	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	1a 94       	dec	r1
    1014:	69 f7       	brne	.-38     	; 0xff0 <__udivmodsi4_loop>
    1016:	60 95       	com	r22
    1018:	70 95       	com	r23
    101a:	80 95       	com	r24
    101c:	90 95       	com	r25
    101e:	9b 01       	movw	r18, r22
    1020:	ac 01       	movw	r20, r24
    1022:	bd 01       	movw	r22, r26
    1024:	cf 01       	movw	r24, r30
    1026:	08 95       	ret

00001028 <_exit>:
    1028:	f8 94       	cli

0000102a <__stop_program>:
    102a:	ff cf       	rjmp	.-2      	; 0x102a <__stop_program>
