from sqlalchemy import *
#from sqlalchemy.orm import mapper
from sqlalchemy.ext.declarative import declarative_base
#from pyramid.config import Configurator
from sqlalchemy.orm import (
    scoped_session,
    sessionmaker,
    )
from zope.sqlalchemy import ZopeTransactionExtension
#from pyramid import config

engine = create_engine('postgresql://spiscan:spiscan@localhost:5432/spiscan', echo=True)
DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))


class ORMClass(object):
    @classmethod
    def query(class_):
        return DBSession.query(class_)
        
    @classmethod
    def get(class_, spirecord):
        return Session.query(class_).get(spirecord)
        
Base = declarative_base(cls=ORMClass)

class Event(Base):
    __tablename__ = 'event'
    spirecord = Column(Integer, Sequence('event_spirecord_seq'), primary_key=True, nullable=False)
    spifileprefix = Column(String)
    spidate = Column(DateTime, nullable=False)
    eventtype = Column(String(3))
    filename = Column(String)
    memo = Column(String)
    project = Column(String)
    extend_existing = True
    
    def __init__(self, spifileprefix, spidate, eventtype, filename, memo, project):
        self.spifileprefix = spifileprefix
        self.spidate = spidate
        self.eventtype = eventtype
        self.filename = filename
        self.memo = memo
        self.project = project
        
    def __repr__(self):
        return "<Event('%s','%s','%s','%s','%s','%s')>" % (self.spifileprefix, self.spidate, self.eventtype, self.filename, self.memo, self.project)
        
class MyModel(Base):
    __tablename__ = 'models'
    id = Column(Integer, primary_key=True)
    name = Column(Text, unique=True)
    value = Column(Integer)

    def __init__(self, name, value):
        self.name = name
        self.value = value        

Base.metadata.create_all(engine)

# meta = MetaData()





## event_table = Table('event', meta, autoload=True, autoload_with=engine)

## explicit schema for spiscan database in case tables not created already, db must exist

#event_table = Table('event', meta,
#	Column('spirecord', Integer, Sequence('event_spirecord_seq'), primary_key = True),
#	Column('spifileprefix',String),
#	Column('spidate',DateTime(timezone=False), nullable=False), 
#	Column('type',String(length=3)),
#	Column('filename',String),
#	Column('memo',String),
#	Column('project',String),
#	extend_existing = True, autoload_with=engine
#	)

#users = Table('users', meta,
#	Column('id', Integer, primary_key=True),
#	Column('name',String),
#	Column('fullname', String),
#	extend_existing = True, autoload_with=engine
#	)

#addresses = Table('addresses', meta,
#	Column('id', Integer, primary_key=True),
#	Column('user_id', None, ForeignKey('users.id')),
#	Column('email_address', String, nullable=False),
#	extend_existing = True, autoload_with=engine
#	)
	
#meta.create_all(engine)
##Session = sessionmaker() ## added while trying to generate sqlalchemy queries
##Session.configure(bind=engine)  ## added while trying to generate sqlalchemy queries
##class Event(object):
##    pass
    
##mapper(Event, event_table)

        

