from pyramid.response import Response
from pyramid.view import view_config
from random import randint
from .models import Event, DBSession, MyModel
from sqlalchemy import *
from sqlalchemy.orm import sessionmaker
import datetime
import subprocess
import time
import pygame
import pygame.camera
import sys 
import dspace

PEOPLE = [
        {'name': 'sstanton', 'title': 'Susan Stanton'},
        {'name': 'bbarker', 'title': 'Bob Barker'},
        {'name': 'bpaavo', 'title': 'Brian Paavo'}
]

class myView(object):

    def __init__(self, request):
        self.request = request

    def __call__(self):
        return {}    

    @view_config(renderer="templates/spiscansurveyor.pt", route_name="home")
    def home_view(request):
        return {}

    @view_config(renderer="templates/spiscansurveyor.pt", name="spiscansurveyor.html")
    def index_view(request):
        return {}

    @view_config(renderer="templates/setup.pt", name="setup.html")
    def setup_view(request):
        return {}

    @view_config(renderer="templates/io.pt", name="io.html")
    def io_view(request):
        return {}

    @view_config(renderer="templates/files.pt", name="files.html")
    def files_view(request):
        return {}

    @view_config(renderer="templates/manual.pt", name="manual.html")
    def manual_view(request):
        return {}       
       
#    @view_config(route_name='add', renderer="templates/add.pt")
#    def add_view(request):
#        '''This is an add view. Here is where we define and pass any information to the template.'''
        #Code here
#        return {'project':'myapp'}
             
    @view_config(route_name='lastscan')
    def test_page(request):
        response = Response(content_type='image/jpeg')
        response.app_iter = open('/home/brian/scan/lastscan.jpg', 'rb')
        return response             
        
#    @view_config(renderer="templates/spifiles.pt", name="spifiles")
#    def people_view(self):
#        return {"page_title": "SPI Scans", "people": PEOPLE}    

    @view_config(renderer="templates/spifiles.pt", route_name="spifiles")
    def spifiles(request):
        dbsession = DBSession()
        data = dbsession.query(Event).all()
        print data
        return {"page_title":"SPI Files", "data":data}
        
    @view_config(renderer="templates/camfiles.pt", route_name="camfiles")
    def camfiles(request):
        dbsession = DBSession()
        data = dbsession.query(Event).order_by(Event.project).filter_by(eventtype='CAM').all()
        print data
        return {"page_title":"CAM Files", "data":data}
        
    @view_config(renderer="templates/logfiles.pt", route_name="logfiles")
    def logfiles(request):
        dbsession = DBSession()
        data = dbsession.query(Event).all()
        print data
        return {"page_title":"LOG Files", "data":data}
                
    @view_config(renderer="json", name="update")
    def update_view(self):
    	now = datetime.datetime.utcnow()
    	outfile = ("/home/brian/scan/%s" % now.strftime("SPI_%Y%m%d%H%M%S") + ".jpg")
    	cam_event = Event('fileprefix',now,'SPI',outfile,'memoooo','projecto')
	DBSession.add(cam_event)  #adds record of scan event to database
    	done = 0  # Start actual scan
        print "calling dspace.scan_description";
        dspace.scan_description("test description");
        print "called dspace.scan_description successfully";
        while done==0:
	    dspace.scan_start(1);
        while dspace.scan_done()==0 :
            time.sleep(1)
        print "scan done"
	done=1
        return []
 	
    @view_config(renderer="json", name="stopcam")
    def stopcam_view(self):
	cmdkill = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/killmjpg.sh"
	subprocess.call(cmdkill, shell=True)
 	return []
 	
    @view_config(renderer="json", name="startcam")
    def startcam_view(self):
	cmdlostart = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/lostart.sh"
	subprocess.call(cmdlostart,shell=True)
 	return []
        
    @view_config(renderer="json", name="camcapture")
    def camcapture_view(self):
	now = datetime.datetime.utcnow()
	outfile = ("/home/brian/cam/%s" % now.strftime("CAM_%Y%m%d%H%M%S") + ".jpg")
	cam_event = Event('fileprefix',now,'CAM',outfile,'memooo','projecto')
	DBSession.add(cam_event)
#	cmdkill = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/killmjpg.sh"
#	cmdlostart = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/lostart.sh"
#	cmdhistart = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/histart.sh"
#	cmdframegrab = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/framegrab.sh"
#	subprocess.check_call(cmdkill, shell=True)
	pygame.camera.init()
	cam = pygame.camera.Camera("/dev/video1",(1920,1080))
	cam.start()
	img = cam.get_image()
	pygame.image.save(img,"/tmp/capture.jpg")
	cam.stop()
#	subprocess.call(cmdlostart,shell=True)
        inpfile = "/tmp/capture.jpg"
        tfile = "/home/.spiscan/runtime.conf"
        label = ("SPIScan Surveyor SN7 %s" % now.strftime("%Y%m%d%H%M%S")) 
        args = []
        args += ["-background", "White"]
  	args += ["-pointsize","42"]
        args += ["label: "+ label]
        args += ["-gravity", "Center"]
        args += ["-append"]
        subprocess.call(["convert",inpfile] + args + [outfile])
	time.sleep(5)
	imp = []
	imp += ["-dissolve", "45"]
	imp += ["-gravity", "South"]
	subprocess.call(["composite"] + imp + [tfile] + [outfile] + [outfile])
	thmbfile = ("/home/brian/cam/thumbs/%s" % now.strftime("CAM_%Y%m%d%H%M%S") + ".jpg")
	thmb = []
	thmb += ["-resize","80x80"]
	subprocess.call(["convert",outfile] + thmb + [thmbfile])
	return []
