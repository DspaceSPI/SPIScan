from pyramid.response import Response
from pyramid.view import view_config
from random import randint
from .models import Event, DBSession
#from sqlalchemy.exc import DBAPIError
#from .models import (
#    DBSession,
#    mymodel,
#    )
#from pyramid.renderers import get_renderer
import datetime
import subprocess
import time
import pygame
import pygame.camera
import psycopg2 
import sys 



PEOPLE = [
        {'name': 'sstanton', 'title': 'Susan Stanton'},
        {'name': 'bbarker', 'title': 'Bob Barker'},
        {'name': 'bpaavo', 'title': 'Brian Paavo'}
]

class myView(object):

    def __init__(self, request):
        self.request = request

    def __call__(self):
        return {}    

    @view_config(renderer="templates/spiscansurveyor.pt", route_name="home")
    def home_view(request):
        return {}

    @view_config(renderer="templates/spiscansurveyor.pt", name="spiscansurveyor.html")
    def index_view(request):
        return {}

    @view_config(renderer="templates/setup.pt", name="setup.html")
    def setup_view(request):
        return {}

    @view_config(renderer="templates/io.pt", name="io.html")
    def io_view(request):
        return {}

    @view_config(renderer="templates/files.pt", name="files.html")
    def files_view(request):
        return {}

    @view_config(renderer="templates/manual.pt", name="manual.html")
    def manual_view(request):
        return {}       
             
    @view_config(route_name='lastscan')
    def test_page(request):
        response = Response(content_type='image/jpeg')
        response.app_iter = open('/home/brian/scan/lastscan.jpg', 'rb')
        return response             
        
#    @view_config(renderer="templates/spifiles.pt", name="spifiles")
#    def people_view(self):
#        return {"page_title": "SPI Scans", "people": PEOPLE}    

    @view_config(renderer="templates/spifiles.pt", name="spifiles")
    def scanslist(self):
        db = psycopg2.connect('dbname=spiscan user=spiscan')
        kerser = db.cursor()
        kerser.execute('SELECT event.spirecord, event.filename FROM public.event')
        id_data = kerser.fetchall()
        print id_data
        {'id_data': [dict(value=value, label=label) for value, label in id_data]}
        print id_data
#        for index in range (len(id_data)):
#            id_list.append(id_data([index][0]))
        return {"page_title": "SPI Scans", "people": PEOPLE, "list": id_data}
    
#    @view_config(route_name='scanslist', renderer='json')            
#    def scanslist(request):     
#        con = psycopg2.connect(database='spiscan', user='spiscan') 
#        cur = con.cursor()
#        cur.execute('SELECT version()')         
#        rows = cur.fetchall()
#        for row in rows:
#             return [rows] 
#        if con:
#             con.close()                
#        return []
                
    @view_config(renderer="json", name="update")
    def update_view(self):
    	now = datetime.datetime.utcnow()
    	outfile = ("/home/brian/scan/%s" % now.strftime("SPI_%Y%m%d%H%M%S") + ".jpg")
#    	open("/tmp/hit-update","a").write("update hit on %s\n" % datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S"))
#	open("/tmp/hit-update","a").write("scan on %s\n" % datetime.datetime.utcnow())
        e = Event()
        e.spirecord=None
        e.spifileprefix="modtest"
        e.spidate=now
        e.type="SPI"
        e.filename= outfile
        e.project="fake project" 
        e.memo="fake memo"
        DBSession.add(e)
#	 comtest=subprocess.Popen('', bufsize=0, executable=none, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0)
 	return [
 	     randint(0,100),
 	     randint(0,100),
 	     randint(0,100),
 	     randint(0,100),
 	     888,
 	]
 	
    @view_config(renderer="json", name="stopcam")
    def stopcam_view(self):
	cmdkill = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/killmjpg.sh"
	subprocess.call(cmdkill, shell=True)
 	return []
 	
    @view_config(renderer="json", name="startcam")
    def startcam_view(self):
	cmdlostart = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/lostart.sh"
	subprocess.call(cmdlostart,shell=True)
 	return []
        
    @view_config(renderer="json", name="camcapture")
    def camcapture_view(self):
	now = datetime.datetime.utcnow()
	outfile = ("/home/brian/cam/%s" % now.strftime("CAM_%Y%m%d%H%M%S") + ".jpg")
	e = Event()
        e.spirecord=None
        e.spifileprefix="desktest"
        e.spidate= now
#       e.spidate= now.strftime("Y%m%d%H%M%S")
        e.type="CAM"
        e.filename=outfile
        e.project="fake project" 
        e.memo="fake memo"
        DBSession.add(e)
#	cmdkill = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/killmjpg.sh"
#	cmdlostart = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/lostart.sh"
#	cmdhistart = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/histart.sh"
#	cmdframegrab = "bash /home/brian/DspaceSPI/SPIScan/mjpg-streamer/framegrab.sh"
#	subprocess.check_call(cmdkill, shell=True)
#       time.sleep(2)
	pygame.camera.init()
	cam = pygame.camera.Camera("/dev/video1",(1920,1080))
	cam.start()
	img = cam.get_image()
	pygame.image.save(img,"/tmp/capture.jpg")
#	time.sleep(2)
	cam.stop()
#	time.sleep(2)
#	subprocess.call(cmdlostart,shell=True)
#	open("/tmp/capture","a").write("frame grab on " + now)
        inpfile = "/tmp/capture.jpg"
        tfile = "/home/.spiscan/runtime.conf"
        label = ("SPIScan Surveyor SN7 %s" % now.strftime("%Y%m%d%H%M%S")) 
#        time.sleep(2)
        args = []
        args += ["-background", "White"]
  	args += ["-pointsize","42"]
        args += ["label: "+ label]
        args += ["-gravity", "Center"]
        args += ["-append"]
        subprocess.call(["convert",inpfile] + args + [outfile])
	time.sleep(5)
	imp = []
	imp += ["-dissolve", "25"]
	imp += ["-gravity", "South"]
	subprocess.call(["composite"] + imp + [tfile] + [outfile] + [outfile])
	return []
